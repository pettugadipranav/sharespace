post_id,display_name,comment_text
431455,Community,"Please provide additional details in your answer. As it's currently written, it's hard to understand your solution."
431499,Community,"Please clarify your specific problem or provide additional details to highlight exactly what you need. As it's currently written, it's hard to tell exactly what you're asking."
431626,Community,"Please clarify your specific problem or provide additional details to highlight exactly what you need. As it's currently written, it's hard to tell exactly what you're asking."
431677,Community,"Please clarify your specific problem or provide additional details to highlight exactly what you need. As it's currently written, it's hard to tell exactly what you're asking."
431781,Community,"Please provide additional details in your answer. As it's currently written, it's hard to understand your solution."
431830,Community,"Please clarify your specific problem or provide additional details to highlight exactly what you need. As it's currently written, it's hard to tell exactly what you're asking."
431937,Community,"Your answer could be improved with additional supporting information. Please [edit] to add further details, such as citations or documentation, so that others can confirm that your answer is correct. You can find more information on how to write good answers [in the help center](/help/how-to-ask)."
431964,Community,"As it’s currently written, your answer is unclear. Please [edit] to add additional details that will help others understand how this addresses the question asked. You can find more information on how to write good answers [in the help center](/help/how-to-ask)."
431979,Community,"Please clarify your specific problem or provide additional details to highlight exactly what you need. As it's currently written, it's hard to tell exactly what you're asking."
432000,Community,"As it’s currently written, your answer is unclear. Please [edit] to add additional details that will help others understand how this addresses the question asked. You can find more information on how to write good answers [in the help center](/help/how-to-ask)."
432355,Community,"Your answer could be improved with additional supporting information. Please [edit] to add further details, such as citations or documentation, so that others can confirm that your answer is correct. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
432614,Community,"Your answer could be improved with additional supporting information. Please [edit] to add further details, such as citations or documentation, so that others can confirm that your answer is correct. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
433271,Community,"Please clarify your specific problem or provide additional details to highlight exactly what you need. As it's currently written, it's hard to tell exactly what you're asking."
435446,Community,"Your answer could be improved with additional supporting information. Please [edit] to add further details, such as citations or documentation, so that others can confirm that your answer is correct. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
435635,Community,"Your answer could be improved with additional supporting information. Please [edit] to add further details, such as citations or documentation, so that others can confirm that your answer is correct. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
436219,Community,"As it’s currently written, your answer is unclear. Please [edit] to add additional details that will help others understand how this addresses the question asked. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
436214,Community,"Please clarify your specific problem or provide additional details to highlight exactly what you need. As it's currently written, it's hard to tell exactly what you're asking."
436242,Community,"As it’s currently written, your answer is unclear. Please [edit] to add additional details that will help others understand how this addresses the question asked. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
436381,Community,"Please edit the question to limit it to a specific problem with enough detail to identify an adequate answer."
436704,Community,"Please clarify your specific problem or provide additional details to highlight exactly what you need. As it's currently written, it's hard to tell exactly what you're asking."
439161,Community,"As it’s currently written, your answer is unclear. Please [edit] to add additional details that will help others understand how this addresses the question asked. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
439327,Community,"Your answer could be improved with additional supporting information. Please [edit] to add further details, such as citations or documentation, so that others can confirm that your answer is correct. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
439386,Community,"As it’s currently written, your answer is unclear. Please [edit] to add additional details that will help others understand how this addresses the question asked. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
439528,Community,"Your answer could be improved with additional supporting information. Please [edit] to add further details, such as citations or documentation, so that others can confirm that your answer is correct. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
439482,Community,"As it’s currently written, your answer is unclear. Please [edit] to add additional details that will help others understand how this addresses the question asked. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
439457,Community,"Please edit the question to limit it to a specific problem with enough detail to identify an adequate answer."
440563,Community,"As it’s currently written, your answer is unclear. Please [edit] to add additional details that will help others understand how this addresses the question asked. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
440977,Community,"Please clarify your specific problem or provide additional details to highlight exactly what you need. As it's currently written, it's hard to tell exactly what you're asking."
440998,Community,"As it’s currently written, your answer is unclear. Please [edit] to add additional details that will help others understand how this addresses the question asked. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
441278,Community,"Please edit the question to limit it to a specific problem with enough detail to identify an adequate answer."
441568,Community,"Please edit the question to limit it to a specific problem with enough detail to identify an adequate answer."
441579,Community,"As it’s currently written, your answer is unclear. Please [edit] to add additional details that will help others understand how this addresses the question asked. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
441613,Community,"Please edit the question to limit it to a specific problem with enough detail to identify an adequate answer."
441737,Community,"Please clarify your specific problem or provide additional details to highlight exactly what you need. As it's currently written, it's hard to tell exactly what you're asking."
441742,Community,"Please edit the question to limit it to a specific problem with enough detail to identify an adequate answer."
441775,Community,"Please edit the question to limit it to a specific problem with enough detail to identify an adequate answer."
441795,Community,"Please clarify your specific problem or provide additional details to highlight exactly what you need. As it's currently written, it's hard to tell exactly what you're asking."
441757,Community,"As it’s currently written, your answer is unclear. Please [edit] to add additional details that will help others understand how this addresses the question asked. You can find more information on how to write good answers [in the help center](/help/how-to-answer)."
441900,Community,"Please edit the question to limit it to a specific problem with enough detail to identify an adequate answer."
134,"Joel Spolsky","I like the first part of the question, but I don't think we should have any locale or time specific components. Rates change depending on specific location (even in the US, different locations will have different rates) and time (rates change over time and become no longer valid)."
142,"Joel Spolsky","People who find this site might not be from Stack Overflow. In addition, people who are of interest might not be on Stack Overflow to have a profile there."
163,"Joel Spolsky","I think you should narrow your question to specific programming books. If you include software development, you open the door books including Software Project Survival Guide, A Discipline for Software Engineering, Waltzing with Bears, The Cathedral & The Bazaar, Software Architectures in Practice, Distributed Systems Concepts and Design, Software Requirements, Rapid Development...these are great and well-cited books that have everything to do with software development/engineering, but little to do with the actual programming of software."
134,"Joel Spolsky","I think this is much better, and much more useful to the general community of programmers."
142,"Joel Spolsky","I'm just clarifying for other people who might read this question. Nothing against this answer - I gave you +1."
203,"Joel Spolsky","I don't agree with this. A performance requirement is a valid non-functional requirement for a system."
203,"Joel Spolsky","Ah. Yeah, your absolutely right in that case. You don't worry about the possibilities because there are so many, but focus on what you know."
324,"Joel Spolsky","Who said anyone was browsing Twitter when coding?"
440,"Joel Spolsky","That's true, but I would suspect that these people would post some things of interest - either URLs, a blog post (theirs or someone else's) of interest, etc."
171,"Joel Spolsky","Wow. I just looked through the index - there isn't any mention of immutability."
716,"Joel Spolsky","I haven't read Black Art of Software Estimation yet. Its the only Steve McConnell book I haven't read (well, I've never read After the Gold Rush, but I did read the second incarnation of it - Professional Software Development)."
843,"Joel Spolsky","I don't understand what you mean when you say the client wants a change after the sprint. That has no effect on the work you just completed - it should be part of the next sprint. If this isn't the case, you're...well, doing it wrong."
843,"Joel Spolsky","You make it the highest (or a very high) priority for the next sprint to ensure that it's properly designed, implemented, tested, and then deployed. Since you used the term sprint, I'm assuming that you are using Scrum - a sprint should only be 2 to 4 weeks long. Adding a feature into a sprint at the last minute is only going to cause problems."
2768,"Joel Spolsky","+1. The advantage of Project Euler is that you can implement the solutions in any language, and then compare/contrast them."
2954,"Joel Spolsky","@Jaco Pretorius It's hard to get 17 people to finish in 10-15 minutes. Also, they were well structured - everyone had 1-2 minutes to say what they did yesterday, what they were going to do today, and what they needed from any other people."
4718,"Joel Spolsky","Please explain "the most important feature"". Rails is nothing more than an MVC framework for the Ruby language. That captures everything about it.""
5074,"Joel Spolsky","You might be interested in http://ui.stackexchange.com/questions/1080/using-sign-in-vs-using-log-in and http://ui.stackexchange.com/questions/626/exit-or-log-out-to-leave-your-session"
20634,"Joel Spolsky","Rapid Development and Software Project Survival Guide are the course books for my university's Software Engineering Process and Project Management course. Rapid Development is required for that course, and I highly recommend having it."
20634,"Joel Spolsky","My department uses quite a few classic texts - the Gang of Four book in Engineering of Software Subsystems, Code Complete is recommended in two different courses, and Weiger's Software Requirements is used in the requirements engineering course. And upper-class students typically recommend books like Pragmatic Programmer, Mythical Man Month, and Peopleware to underclassmen."
21842,"Joel Spolsky","Honestly, all of those bullet points describes a good engineer. Especially 1, 2, and 4."
21898,"Joel Spolsky","Because what people are taught is computer science, not software engineering. This problem would go away if universities and students realized that computer science != software engineering, computer science is a science, computer science is not about programming, and software engineering is about more than programming."
22051,"Joel Spolsky","If you want to know how they "cramp up all that is needed for Software Engineering on an undergraduate degree"""
22051,"Joel Spolsky","It's a quarter system, meaning that it's the exact same workload as a CS degree (or any other undergraduate degree) from the same university. In the end, it's 4 years of classes (10 weeks of classes, 1 week of exams per quarter, 3 quarters per year), 1 year of co-op."
24384,"Joel Spolsky","It's supposed to be zero, one, and infinity: http://en.wikipedia.org/wiki/Zero_One_Infinity"
24371,"Joel Spolsky","Programming isn't CS theory. In fact, I could easily argue that programming isn't computer science at all."
22151,"Joel Spolsky","Although it's called "Enterprise Application Architecture"""
24127,"Joel Spolsky","@Uberto That's why everyone should read this book. It explains why and how to use each pattern along with when you probably should consider something else. If more people read the entire pattern entry, I think a lot of those problems would go away."
24371,"Joel Spolsky","Still don't think that programming is CS. Programming MIGHT be useful to a computer scientist who wants to implement an algorithm or data structure, but topics in CS theory (from my Intro to CS Theory book, so there are probably more advanced topics as well) include logic, automata theory, graph theory, computability, computational complexity, and analysis of algorithms. I would also say that programming languages (the theory behind the design and implementation of a language) is also part of computer science. However, you don't need to be able to program to be a good computer scientist."
24371,"Joel Spolsky","Yeah. From CS, I would say understanding programming languages and paradigms might help (especially if you are implementing DSLs, but knowing many paradigms like procedural, functional, OO, logic just helps in software development). Understanding algorithms and data structures also helps you choose the right one(s) to solve your problem in the most efficient way. Automata theory might help (I worked with a system that was a giant FSM once, but I don't know how common that is). So I would say data structures, algorithms, and PL theory would be the most useful things to know from CS."
24384,"Joel Spolsky","@Steven My understanding might not be 100%, here, but I think the idea is that you have none of something, a single thing, or the number of things that you have should be unbounded. If you aren't limiting to no or one instance, then you should not limit the instances. However, I'm not entirely sure WHY this is the case (I'm only vaguely familiar with the Zero/One/Infinity concept)."
3001,"Joel Spolsky","Although Pragmatic Programmer might be considered one, Code Complete definitely isn't a career guidance book."
30359,"Joel Spolsky","Pencil and paper or a whiteboard is faster than most applications that I've used."
30354,"Joel Spolsky","The only problem with this is that there is no validation. Any logic as to what a valid Bottle is should be in the Bottle class. However, using your proposed implementation, I can have a bottle with a negative height and diameter - there's no way to enforce any business rules on the object without validating every time the object is used. By using the second method, I can ensure that if I have a Bottle object, it was, is, and always will be a valid Bottle object according to my contract."
30354,"Joel Spolsky","@user9521 After I'm done testing, debugging, verifying, and validating, I trust my code. But I don't trust clients. You should always write code as if the client is malicious or is going to attempt to put the application into an illegal state in an attempt to exploit it."
32542,"Joel Spolsky","They are good to know, but these aren't CS subjects."
32542,"Joel Spolsky","Programming isn't a CS activity, by the strictest definition of what CS is. And just because a course is part of the curriculum doesn't mean it's in that field."
33953,"Joel Spolsky","None. It's a methodology that is independent of all languages, frameworks, and tools."
33953,"Joel Spolsky","@jkohlhepp This isn't about developer productivity at all. It's about adhering to a specific process or methodology. You can choose to follow the principles of RAD with any language and saying that one language makes following RAD easier is just wrong."
33953,"Joel Spolsky","@jkohlhepp RAD isn't a buzzword, though. It's a well-defined software engineering process methodology. By definition of what a software engineering process methodology is, it must be independent of frameworks and languages."
25730,"Joel Spolsky","PSP can be tailored to include only the measurements that are relevant. This is a key point in the PSP books "A Discipline for Software Engineering"" and ""PSP: A Self-Improvement Process for Software Engineers"".""
55894,"Joel Spolsky","If black-box testers are involved too much, however, they will have an understanding of the design and implementation, and won't be able to effectively carry out black box testing."
62063,"Joel Spolsky","Mercurial was also designed for use in Linux kernel development. However, Linus was pretty much "no"
65140,"Joel Spolsky","I would nix Scrum. You don't have enough people to carry out all of the roles. The roles in Scrum just don't break down if you have fewer than 5 or 6 people."
79799,"Joel Spolsky","I disagree. UML is a great prototyping tool when used properly. You can learn a lot about how classes and objects interact through the proper use of various diagrams."
80836,"Joel Spolsky","I actually wasn't looking for specifically how to lay out files within a project, but how to lay out a number of projects within the service used."
80836,"Joel Spolsky","What I'm looking for are any conventions that exist within each community, if there's anything out of the ordinary. In my experiences, things like BitBucket, GitHub, and SourceForge are more of communities with norms and conventions than simply services (although some people use them like services)."
80836,"Joel Spolsky","So in your answer, since you favor BitBucket, is there anything I should know about structuring my projects across my bitbucket account for maximum efficiency/ease of use so I don't end up fighting the system?"
80836,"Joel Spolsky","I'm not expanding the scope, but I can try to clarify the second part of my question."
80947,"Joel Spolsky","If you decide to go this route, the Project Management Institute is well respected. The requirements for the Certified Associate in Project Management (http://www.pmi.org/en/Certification/Certified-Associate-in-Project-Management-CAPM.aspx) requires 1500 of experience or 23 hours of PM education. You might have this and qualify to take it. It wouldn't be a guarantee, but it would be a step in the right direction."
80952,"Joel Spolsky","@MHarrison Companies that you are interviewing with aren't fine with you wanting to be a PM in 5 years? That's interesting. What industries are you working in? My primary interest is in defense and intelligence (both government and defense contractor), and a 5-7 year window of developer to PM is typical (moreso on the government side of things, though) if you stay within an organization. I'm not sure how other industries operate...I've been told that it takes closer to 10-12 years to become a PM in some."
80985,"Joel Spolsky","In addition to what @Yannis Rizos says, you can use it to track/improve estimates and find time sinks in your day. It's just an all around good practice."
81263,"Joel Spolsky","There are other tools besides Selenium, as well. I've never used it, but Watir can be used to automated testing across a number of browsers. Some people I know prefer Watir to Selenium, but it depends on your (and your team's) background and knowledge."
81300,"Joel Spolsky","There's a quote about this, but most of my books are still packed away. Something about the engineers themselves being the best at scheduling, so they should be involved in the scheduling of a project from Day 1. I want to say that comes from Steve McConnell's Rapid Development, but I can't be sure."
81503,"Joel Spolsky","@Jörg W Mittag, can you provide some examples of tools like what you describe?"
81674,"Joel Spolsky","Similar, but I'm going to go with not a duplicate. This is explicitly asking about cost/effort of creating diagrams and if this cost/effort is worth it."
81676,"Joel Spolsky","My experiences are in the defense and intelligence industries (mostly US government and defense contractors), where there is significantly more up-front planning, even in more agile projects. In my experiences, at least informal models are almost always produced. A little time and money up front saves quite a bit downstream, especially when you are dealing with mission critical software, or components that might be integrated with a mission critical software suite."
81676,"Joel Spolsky","I just added a discussion of cost/time citing Steve McConnell's Rapid Development and Software Project Survival Guide."
81838,"Joel Spolsky","To clarify, do you mean "Factory Method"" when you say ""Factory Pattern""? If you are talking about the Gang of Four patterns"
81732,"Joel Spolsky","The best thing to do would be to get some kind of requirements done, either in the form of an SRS or user stories or use cases, and then ask very specific questions about how to address situations that you don't know, with mentions of the specific requirements that are driving and/or constraining your solution."
82160,"Joel Spolsky","I don't know where you are getting the idea that many products never reach that stage. Over $70 billion is spent on maintenance in the US alone every year. The number of lines of source code being maintained is approaching 300 billion. That's a lot of projects in maintenance phases."
82174,"Joel Spolsky","It depends on the duration of the project. For a long term project that will be entering a maintenance phase, this would have a huge impact on the bottom line. On the other hand, if the project was a short-term rapid prototyping (especially if it was a throwaway prototype), then no, this is of little value."
82174,"Joel Spolsky","@deterb That would be an interesting perspective. But I'm not entirely sure how I would explain "technical debt"" to a manager. I can show him work by McConnell"
82174,"Joel Spolsky","Thanks for that link. I'm going to bookmark it and read it when I get a chance."
82429,"Joel Spolsky","FPA is? Function Point Analysis?"
82429,"Joel Spolsky","@Scrooge: No, Scrum is a particular methodology that is part of the agile family. There are a lot of different agile methods, such as Crystal, XP, and the Agile Unified Process."
82429,"Joel Spolsky","Another question as I'm working on my answer: Why are you using FPA? Function points are a measure of functionality. When combined with time, it's a metric that shows productivity. Scrum already has measurements and metrics for this - user stories, story points, and velocity. It honestly sounds like an overall process problem to me."
82461,"Joel Spolsky","I would consult a lawyer for more information, but if you only use the application from a user's perspective and are able to figure out what it does and write it yourself without communicating with anyone with knowledge of the actual implementation, you have performed clean room design and should be fine. Of course, someone with legal experience is he best way to go."
82647,"Joel Spolsky","That's a very good point, and one that I overlooked. Choosing the right tool (algorithm, data structure, library) for the job. At that point, you begin making memory/space trade-offs by choosing one option out of several."
82646,"Joel Spolsky","@ammoQ True. That said, I've done very little web development, but typically, there are two JavaScript files - the fully commented and readable one and the minimized one which is designed to reduce size. Developers working on the script don't touch the minimized file."
82646,"Joel Spolsky","!ammoQ In JavaScript (along with HTML and CSS), you are dealing with sending the file over a network. You are trying to improve that performance with minimization. The question is referring to the performance of the code itself - my understanding there's no difference in performance between the minimized code and the original code, once it has been delivered to the client. Therefore, minimization has nothing to do with the optimization of the code, a separate issue all together."
82709,"Joel Spolsky","I just want to confirm - the client is asking you to make an estimate for software to be built by someone else, and you will not be leading the team that is actually building the software?"
82751,"Joel Spolsky","I was under the impression that Burn Down Charts shows work remaining on a sprint in terms of story points while a Burn Up Chart shows the total delivered earned value to the customer. Story points and earned value are different - story points relate to time and effort required to complete the tasks as assigned by developers and earned value is the worth of each story as assigned by the product owner. Burn Down focuses on a per-sprint basis for developers, while Burn Up focuses on project level for managers and customers. Is this not the case?"
82761,"Joel Spolsky","Something that concerns me is the measurement of velocity in days. Velocity is points per unit of time (typically points per sprint). Defining velocity in terms of time doesn't make that much sense to me. I'm pretty sure that Focus Factor depends on duration and velocity, which is why I'm questioning your measurement of velocity."
82763,"Joel Spolsky","There's an interesting discussion at http://c2.com/cgi/wiki?NonFunctionalRequirements but I haven't found anything that provides a definitive answer."
82761,"Joel Spolsky","I think @azheglov's answer pretty much addresses it."
82770,"Joel Spolsky","I'e never heard of Kniberg - could you elaborate on how you make your first estimates if your stories have points, and then later make the transition? I was taught that your first sprints, the development team uses their collective experiences to pull down enough tasks to keep them busy for the sprint. If it's over, you pull down less on the next sprint and if it's under, you pull down more points before the sprint is over."
82798,"Joel Spolsky","I think your paragraph about university departments not supporting some internships hits home. At my university, we had three groups at play - the department, the co-op/career office, and a student organization. For anything to count for academic credit, the department (typically with the career office) had to approve it. Even if it was approved, if lots of people were unhappy there, you could find out from them. But given the small and tightly knit nature of the department and students, you can get the real scoop on a lot of places that hired co-ops from students who had worked there."
82820,"Joel Spolsky","Where in your education are you? Are any software process and project management courses on your roadmap?"
82820,"Joel Spolsky","@Jarrod Roberson Scrum is designed for teams of 5-7 developers plus supporting people, not for individual developers working on personal projects. You can't have a stand up meeting. You can't separate the Scrum Master, Scrum Team, Product Owner, and Stakeholders."
73184,"Joel Spolsky","I've never heard of the term "centralized integration"" before. I can take what I would assume is a pretty good guess based on your question"
83003,"Joel Spolsky","SDS is "Software Design Specification"". He uses that phrase earlier in the post"
83179,"Joel Spolsky","I was taught how to use a debugger in my first-year CS sequence, and have frequently used them throughout my education and work. I find it difficult to believe that places don't teach how to use them, but find it more likely that the student doesn't see the advantages and therefore doesn't learn."
83226,"Joel Spolsky","I wouldn't expect you to know everything, but I would expect that anyone working on a particular subsystem would know that subsystem inside and out. I would consider that knowledge caring about your work."
83557,"Joel Spolsky","I think this is the best solution for your current situation, but you should talk about it with your team. However, you do have a bigger problem, which is the lack of a coding standard."
83430,"Joel Spolsky","The thing is that most of the research has been put toward working with teams. To the best of my knowledge, only the PSP has been designed for use by a single engineer. And even within that, the PSP is focused on specifying how to track data to identify areas for improvement and provides only a few high level tasks that might help improve software quality, with no specifics on how to carry out those tasks."
83814,"Joel Spolsky","You describe him as a "great developer"""
85342,"Joel Spolsky","Actually, quite a few places I applied to used automated parsing of your resume. This allows them to pick out keywords, like "Java"""
85353,"Joel Spolsky","You use the phrase "development methodology"" and then say it's about organizing code. That's not true - development methodology refers specifically to process. Examples of development methodologies are iterative"
19449,"Joel Spolsky","@Rei Miyasaka - IronPython 2.7 was released on March 21, 2011, just about 2 months ago. IronRuby was released just weeks before that, on March 13, 2011. I see no indications that either has been ditched by Microsoft since then."
19449,"Joel Spolsky","That's not "ditched"". It's just not officially backed by Microsoft anymore. The projects still exist and are viable solutions for running Ruby and Python on the .NET framework.""
85342,"Joel Spolsky","@Job I don't know what's so hard to believe about that. Especially since I've been developing software for 6 years now, and have been employed in the field on-and-off between courses for 5 years, for a total of 2 years of work experience."
85355,"Joel Spolsky","@glenviewjeff That's not how the term "paradigm"" is defined when referring to a programming paradigm. In this context"
85355,"Joel Spolsky","@Tom Anderson @glenviewjeff The reason that it is indeed a paradigm is that it changes the way you think about a problem. A feature makes it easier to solve a problem, but doesn't change the way you think. An example of a feature is a for-each loop - it doesn't change how you think about a problem involving iterating over a collection, but it makes it easier to do so. A paradigm drastically changes how you reach your solution, and I believe that AOP does this. Without AOP, your solution would be very, very different than with AOP."
85606,"Joel Spolsky","It's been a while since I took an economics course, but I think means of production refers to the tools and infrastructure that you need to produce wealth. I believe the asker is referring to is an individual software developer having free access to everything needed to produce and sell software."
85610,"Joel Spolsky","True, although some of them can provide one of the needs. Farming can produce food and clothing. Carpentry can provide shelter. Smithing might lead to some semblance of clothing (or components of clothing). Software provides none of the basic human needs."
85613,"Joel Spolsky","@Dmitri I've never used Git, but yes, it's fairly simple on Mercurial. It took me about 10-15 minutes, and that was the first time when I was switching between the docs and actually doing things."
85691,"Joel Spolsky","MVP? I've heard of MVVM and MVC, but what is MVP? Could you spell it out somewhere in your question?"
85691,"Joel Spolsky","@Robert Thanks. Now that I read that, I have heard about it. I was just blanking on what the P could have been."
86850,"Joel Spolsky","What type of colorblindness does he have?"
86863,"Joel Spolsky","There's no definitive answer, but there is a question on Stack Overflow that might be relevant to your interests: http://stackoverflow.com/questions/398586/how-to-determine-minimum-system-requirements"
86976,"Joel Spolsky","Even if there are features not available in an existing product, quite a few of the open-source self-hosted solutions offer plugins, extensions, and other add-on capabilities. If there's a particular feature, you can see if anyone else has developed it, and if not, simply develop a plugin. That should save quite a bit of time, since you are only building things that don't exist."
87238,"Joel Spolsky","It isn't bound to any layer. You test the requirement against where ever that requirement exists. In many cases, you'll be testing multiple layers simultaneously, though, since the requirement describes the system as a whole (which, by definition, includes all layers)."
88284,"Joel Spolsky","That is a valid point, as well. I'm typically more security-focused than usability-focused, but if you did want to expose a new version of your system for acceptance testing (perhaps by clients, or as part of a public beta), then yes, a public-facing environment would be required."
89912,"Joel Spolsky","How are you forced to write bad code? Why can't you stand up, stop putting your name to bad code, and explain the problem, the solution, the cost in terms of time, effort, and money, and the benefits of fixing the problems now to your superiors?"
90989,"Joel Spolsky","The first sentence here is important. Make sure that you are actually following the agreed-upon standards, and not just making changes because you like them."
91089,"Joel Spolsky","I think that a progress bar should only be used if the duration or total tasks is known. Otherwise, something more indeterminate should be used."
91123,"Joel Spolsky","Actually, there is an IEEE standard definition of "scripting language"". I'd have to look up the exact phrasing"
91123,"Joel Spolsky","@Charles E. Grant I thought the definition was either in the IEEE Glossary or the SWEBOK, but I haven't found it. That wasn't the exact phrasing, but it's pretty close. Either way, it is pretty accuarate because it specifically isolates languages like sed, awk, bash scripting, Windows batch scripts, and so on from more robust languages like Python and Ruby (which have the capability to be scripting languages, but also much more)."
91759,"Joel Spolsky","I don't understand this. There's a significant body of research on software quality, especially with regards to cost and effort. I could pull a half dozen books from my bookshelf alone that have chapters or sections on software quality or controlling costs of software projects with a mention of defect elimination or reduction."
91839,"Joel Spolsky","Also, there are files that must exist for the running of the application. Those would be exceptional conditions. If there's a file that you must have in order for the application to function, then there's no reason not to read from it and then handle the exception for the exceptional case. I believe it makes the intent more clear."
71080,"Joel Spolsky","Are you sure the word "design"" is attached? I've heard of upstream and downstream"
93711,"Joel Spolsky","Are you sure the sales team is "interfering""? Typically"
93729,"Joel Spolsky","Cost of version control software is not free. The software itself is might be free (depending on your selection), but in an organization that has nothing, you need training for the engineers, you might need hardware for the repositories to reside on, and if the organization rolls it out to everyone, an increase in IT funding to support the new hardware and software requirements. Not to mention the high risk of deploying process late in a project."
93729,"Joel Spolsky","The edit makes it much better."
93731,"Joel Spolsky","I agree with @Victor Braga. It's not about when the book was written, but it's about how much the language has changed. Java has changed a lot in the last 5-10 years. However, C has not. Your 5 year old Java books are pretty much worthless. However, your first edition of the K&R C book from 1978 is far more up-to-date (although it's not 100% accurate, and neither is the second edition from 1988). The main factor is how much the language and supporting tools have changed between the publication of the book and when you want to use the book."
93730,"Joel Spolsky","It depends on how you define fundamentals. 5-10 years ago, things like generics, autoboxing, enumerations, varargs, and the for-each loop were new or didn't exist yet. I believe that those features fundamentally changed how you write good, high quality, readable, and maintainable software in Java. Not to mention, a number of standard functions wouldn't be covered because people would have to roll their own. Why learn 5-10 year old practices and habits that you'll just have to break and learn new techniques?"
93730,"Joel Spolsky","@World Engineer - That's scary. 12 years ago was 1999, which means Java 1.2 was out. After that, changes were made to RMI, JNDI became core, the assert keyword was added, changes were made to regex, and the NIO and logging APIs, generics, Scanner class, autoboxing, enums, varargs, and the for-each loop were added. Not to mention changes to AWT, Swing, JDBC, and the compiler and JIT compiler. That university is teaching bad habits to anyone who reads that book. I would have to question the value of anyone who graduates from that program if they can't use adequate resources for the first courses"
93730,"Joel Spolsky","@Pete We used or discussed generics, Scanner, enums, autoboxing, and Swing in the first two quarters (about a semester and a half) of my first-year CS sequence."
93762,"Joel Spolsky","The first part is true, but I don't agree with the second part. A book on Java is typically going to teach you how to build with Java, not design a system that is going to eventually be implemented in Java. And also, comparing a relatively unchanging language (like C) to a fast-changing language (like Java) is flawed."
93737,"Joel Spolsky","Management does, but it's always easier to get management's attention if you have a group of people saying something, rather than an individual."
93779,"Joel Spolsky","Actually, no. It's an almost perfect match to Steve McConnell's Waterfall with Subprojects. The only difference is WwS is typically done with teams for each component so they are done simultaneously, while @Ricky Robinson was working alone so did one at a time."
93780,"Joel Spolsky","No, it's not truly iterative. To be truly iterative, you need to integrate and deploy at the end of every iteration. Iterative is really a sequence of waterfalls, one after another, each ending with a testable and (possibly) deployable system."
93780,"Joel Spolsky","Yeah. I did at first, which is why I changed my thought from spiral to Waterfall with Subprojects. Although it's hard to fit a methodology designed to account for team activities to a single person."
93781,"Joel Spolsky","That's what I thought at first, but it's not exactly the spiral model. The spiral model is for a single unified system that's being built. The question mentions four distinct applications, each was built with a single waterfall. If the four subsystems were treated as a single unit and built simultaneously as-needed, then it would be much closer to spiral."
93736,"Joel Spolsky","No. Client-centric, appears to me, to refer to applications that reside only on a client (and perhaps might access data stored remotely by querying a remote data store or dabase). Client-server, n-tier architecture, and the others are all distributed systems. Client-centric is either (1) non-distributed or (2) performs computation on client-side, with a "dumb"" data store that might be shared. However"
95334,"Joel Spolsky","I would recommend this approach. It leverages polymorphism and decouples the clients from the implementation. OO design the way it was meant to be."
95513,"Joel Spolsky","@Pierre You should expand on that and make it an answer."
95606,"Joel Spolsky","@Dean You have enough reputation to edit. That's the whole point of allowing other users to edit questions - to make them viable to the community. As long as the author's original intent is not disturbed, I have no problems editing other people's postings. If more people took this approach, we would have far fewer closed questions, I think."
95606,"Joel Spolsky","@Alex Rants are not acceptable here. See the FAQ (http://programmers.stackexchange.com/faq#dontask). If you have a question, ask it with only the background necessary to answer the question, minus any ranting or raving."
95540,"Joel Spolsky","Is evaluating how well someone knows functional programming any different than evaluating how well someone knows object-oriented programming, procedural programming, or aspect-oriented programming?"
95444,"Joel Spolsky","Rather than making a new question, you should edit your existing question and try to get it reopened. That's generally the "best practice"" on Stack Exchanges.""
95708,"Joel Spolsky","@IkerB If you find an answer good, you should upvote it. If you find an answer that best answers all of your questions, you should accept it by clicking the checkmark next to it."
95708,"Joel Spolsky","@MadKeithV With the exception of Refactoring, they are were all required reading when I was getting my degree in SE. Refactoring was pointed out as a good book to read in at least one course, though. All of them are sitting on my bookshelf at home, most having been opened recently. I just can't bring myself to bring them to the office, since I might want them when I'm working on something at home."
95708,"Joel Spolsky","@MadKeithV That is discussed in the first part of the book, before the pattern definitions. At least, it is in the printing that I have, I'm not sure about earlier printings."
95749,"Joel Spolsky","What are you doing besides posting jobs on job boards? Unless I was explicitly interested in working for the company, most of the jobs I've applied to weren't through a posting, but by the company reaching out to me (coming to my university, emailing me). Very rarely have I ever browsed job postings. Perhaps your HRM practices as a whole should be examined, but that's a little off-topic for Programmers."
95885,"Joel Spolsky","In addition to this, I think it's important that you clear this with your manager and IT. You don't want to break company policy by bringing in any unapproved devices, especially if they will be added to the network. You'll also want to clearly identify resources that belong to you versus the company so that they don't reallocate resources that don't belong to the company, as well as to avoid issues should you leave the organization."
96128,"Joel Spolsky","@RPK Are you only interested in the GUI Admin tool? MySQL also provides that in the form of the MySQL Workbench. Do you have any technical reasons for moving dbs?"
96322,"Joel Spolsky","10-15 days of paid free time? I've never heard of this, anywhere. Yes, there are usually lulls in the work where things slow down quite a bit, but two or three weeks of no work? I think that might be a sign of poor project management. Think of what you could achieve if you started work on the next release right away - a much more relaxed pace, perhaps adding more value to the release."
96298,"Joel Spolsky","Actually, in a code review, lines of code could be a useful measurement. If you record the number of lines read prior to a meeting and lines reviewed during the meeting, along with time spent reading the code before and time spent during the meeting, you can try to gauge meeting effectiveness. Lines of code aren't a good measurement of a productivity metric (LOC/hour, as an example, isn't so great)."
96320,"Joel Spolsky","It's not hard to get meaninful measurements or metrics from reviews. LOC read prior to meeting/time, LOC reviewed/time, defect removal effectiveness (although you would also need requirements reviews and design reviews, along with testing, to get a full picture)..."
96298,"Joel Spolsky","That has no effect on the number of lines of code that were read by reviewers before the code review, the number of lines of code read by the group during the review itself, the time spent by an individual developer reading the code under review prior to the meeting and annotating that code, and the total time spent during the meeting."
96320,"Joel Spolsky","It's not necessarily about how they improve the end product just because they were measured. Developing a quality process is just as important as developing a quality product. If you spent 8-10 man-hours a week doing code reviews, but 75% of defects escape to integration testing, you're, quite simply, doing something wrong. Code reviews are proven to improve quality of code, but if you are spending adequate time, yet not seeing benefits, it's important to find out why. I would recommend reading Metrics and Models by Kan for more about quality engineering at the project and process level."
96535,"Joel Spolsky","A problem is you are getting defect reports from work done 4-6 sprints ago (assuming 2-3 week sprints). Depending on the company's QA policies and procedures, they might actually have to sign off on a sprint before it can be released to the customer. So, yes, you have potentially shippable products after every sprint, but less than 25% of those will hit QA (assuming that when they finish testing one candidate, they begin testing the most recent candidate) so you can show a customer a product every few weeks, but they can only get one every 12 weeks and it'll be older than what they just saw."
96728,"Joel Spolsky","@Christopher Not true. For performance tuning and evaluation, yes. But for developing code to work with a given schema, absolutely not. You just need enough data to account for variations in terms of content of each field. Once the software has been developed and tested against that, performance tuning can be done against a more realistic data set."
96728,"Joel Spolsky","@Christopher That's a problem at the system administration and DBA level, not for the application programmer. Any such changes should be invisible to the application. The only time you might have to worry is if you are defining your own abstraction layer. And why are you reinventing the wheel, instead of focusing on building software to solve your client's problems?"
96728,"Joel Spolsky","@Christopher Still doesn't matter. You don't need all of the data to ensure that your queries still execute and your domain objects are able to properly represent data stored in the database. Other than performance tuning (which includes sharding), you do not need any more than a small fraction of total data."
96728,"Joel Spolsky","@David I mentioned that explicitly in my original post. "Everything should have the same characteristics as the actual data in terms of formatting"
96967,"Joel Spolsky",""All metrics lead to activity to optimize the metric."" I think that is too often true. However"
96967,"Joel Spolsky","I think @Michael Borgwardt's answer addresses that. You simply don't have any rewards to optimize based on metrics. Instead, you just use them as indicators to guide decisions. If you change "cyclomatic complexity for all methods must be below 15"" to ""a cyclomatic complexity of 9 indicates that a method should be reviewed"""
96967,"Joel Spolsky","@S.Lott You don't keep metrics secret. I don't know where you've worked, but I've never seen metrics lead to rewards. No one has been rewarded for reaching a set cyclomatic complexity or fan-in/fan-out. Teams get rewarded for shipping software within schedule and budget, while meeting functional and non-functional requirements defined in an SRS. Individuals are recognized for their performance and contributions toward that. The metrics are just used to guide the process as to how the software is shipped within schedule and budget. The engineers use metrics to make the best possible software."
96967,"Joel Spolsky","Project managers should be making decisions on the health and status of the project, not on specific metrics. If I see a poor design or implementation hinted at by some metric, I examine the code to see if it's a legitimate problem, then bring it up at a status meeting or a code review so it can be evaluated by everyone if it is potentially problematic. When software reports to project management, they distill most metrics into an overall health/status of the system. Management cares more about overall system health and quality than specific metrics, although some are still reported up."
96967,"Joel Spolsky","@S.Lott We don't have goals centered around those metrics. Everyone is expected to produce high quality software. Our goals are centered around meeting functional requirements, nonfunctional requirements, and minimizing defects in shipped software. Code quality is tracked and policed internally - if I see signs of poor quality in someone else's code, I'll call them out on it, and I've been called out for some poor quality code myself. It's a matter of personal pride that our code is well designed and implemented, not dictacted by management."
96965,"Joel Spolsky","@locster You probably want to expand on it and note, for example, which packages the classes you are connected to are in. Don't just look at the raw numbers, but break it down into things like X classes within my package, Y classes outside my package, or Z classes in this particular package. If you see fan-out between modules in your data model and modules in your UI, that could be an indicator of a problem. You need to dig a little deeper than just the raw numbers."
96967,"Joel Spolsky","That's not skewing anything. It's been proven time and time again that code with a low cyclomatic complexity is easier to test and that SLOC in a module has a direct impact on the number of defects in the module. Having easily testable, low-defect code **is** good code. Even if your code isn't low-defect, the improved testability will help you find and identify defects before release, improving the overall system quality. There's nothing skewed about that at all."
96967,"Joel Spolsky","@S.Lott You can't care about only one quality metric. And in fact, these only look at code quality (because they were specifically asked about). There are tons of metrics at the project as well as product level, and not all are appropriate for every project - you need to choose what's important. Project metrics include effort, productivity (don't measure in LOC/time, please!) cost, rate of defect reports, requirements volatility, defects found after delivery. Product metrics include hardware utilization, defects/LOC, load time, execution time (per task), cohesion, coupling, test coverage."
96967,"Joel Spolsky","@S.Lott Are you suggesting that decisions are based exclusively on the metrics? Once you have your measurements and metrics, you aren't done. Metrics can only raise a warning flag. Once you detect a problem, you need to follow through with root cause analysis (5 Whys, Ishikawa diagrams, Pareto analysis) in order to determine what needs to be optimized. Going back to cyclomatic complexity, if you have a high CC, you need to determine why and correct the cause. Simply reducing CC is good (code becomes more easily tested), but meaningless unless you know what (in)actions led to it and fix those."
96967,"Joel Spolsky","Simply, the proper course of action is to identify the metric(s) that add the most value, gather the data and set warning level thresholds that indicate a problem with the process or product, identify potential problems, perform root cause analysis, and then fix the problems instead of simply "optimizing the metric"".""
97389,"Joel Spolsky","Trac is a project management system that incorporates a wiki, scheduling, bug tracking, and source code control integration. It's pretty much a one-stop-shop for all information about your project."
97389,"Joel Spolsky","@Andrea The wiki components of Trac and Redmine are suitable for KM. In addition, the current state of bugs, issues, tasks, and the source code are indeed part of the knowledge needed by various people involved in the project."
97437,"Joel Spolsky","You might be interested in this question on Stack Overflow: http://stackoverflow.com/questions/2068804/why-is-string-final-in-java"
97459,"Joel Spolsky","What type of development are you doing? For high level programming, knowing the basic commands on the terminal would be a huge plus, along with perhaps knowing one of the major text editors (vi, emacs). For lower level programming, you need to know more about system calls, system-specific header files, and how threading is handled on a system level. For example, cross-platform C++ has a lot of nuances - I have a system now that compiles on all major OSes except for Solaris."
97463,"Joel Spolsky","Of those, `apt-get` is probably useless and `gedit` should be familiar to anyone who has used a text editor before. Every Linux distro (and Unix-based OS) has a different install/update tool, and I wouldn't expect a developer to have to maintain the environment as that would be done by IT. Also, you forgot to mention `emacs` as an alternative to `vi` - which one you use depends a lot on personal preferences (and, in my opinion, team preferences)."
97463,"Joel Spolsky","Like I said, in any decently-sized corporation, no software engineer should ever be installing software. If something needs to be installed on the system, IT should be handling that."
97463,"Joel Spolsky","@Thorbjørn, I've never worked in a place where the engineers manage any type of system, development or production. To me, that's just foreign. In fact, software engineers have typically been told to not manage systems themselves, but to always go through IT for everything."
97588,"Joel Spolsky","@quant_dev Are you sure the compiler is supposed to be standards-compliant? Many things deviate from the standard, and it's documented. The defect could be as simple as updating the documentation to reflect the lack of standards compliance. Just because you think it's a bug doesn't mean that it isn't intended behavior."
97691,"Joel Spolsky","There are already measures of code complexity - cyclomatic complexity, class length (LOC), method length (LOC), number of fields, number of method parameters, n-path complexity, fan in/fan out, and data flow analysis (DU/DD chains). Work has been done to correlate these to defect density, effort to maintain, and ease of understanding. How does what you are looking for compare to these?"
97691,"Joel Spolsky","@Simon, ok, if you think so. I'm not 100% sure."
97988,"Joel Spolsky","Fun Fact: The Waterfall model that a lot of people think of is actually a model of a broken development methodology, not one that was ever intended to be used or implemented. See Winston Royce's "Managing the Development of Large Software Systems"".""
97993,"Joel Spolsky","When writing my post, I was thinking more about things like aircraft, weapons systems, and pacemakers. All the unit testing, integration testing, and simulation in the world is meaningless if you aren't absolutely sure about everything, from the requirements through the testing. You need careful planning to make sure that everything's been accounted for. Turning one of these devices on, in a live setting, could have fatal consequences if anything goes wrong."
97988,"Joel Spolsky","@toleero Yes. Figure 2 shows the traditional view of the waterfall. The text right below that explains why it should never be used."
98101,"Joel Spolsky","From what you posted, it doesn't sound like a lack of organization. Instead, it sounds like a lack of interest or drive to complete the project. Is there a reason why you delete the projects instead of following through with them? If you truly aren't interested in the project or the technologies you are using, there's really no point in following through, or else it will become a chore."
98214,"Joel Spolsky","Unless I'm misreading, how is this not a counting semaphore?"
98214,"Joel Spolsky","You must know the number of times it can get locked. Otherwise, you have no method of determining when a new thread must wait instead of incrementing the counter and having the resource."
98214,"Joel Spolsky","Given that post, it sounds like a variation on either a semaphore or a reentrant mutex. But I'm not 100% sure."
98243,"Joel Spolsky","The project triangle typically is cost, time, and scope (or features). Quality is affected by all of these in a different dimension."
98267,"Joel Spolsky","Is this a sprint retrospective or a project retrospective?"
98278,"Joel Spolsky","I've never been a fan of organizations that try to be "fun"" and bring in gimmicks. It comes off as unprofessional and"
98336,"Joel Spolsky","How can you build software without use cases or tests? To me, that says you have no users, no requirements, and no ability to verify or validate any aspect of your system."
98336,"Joel Spolsky","If you honestly don't have a requirements specification and some kind of unit, integration, system, or acceptance tests, yeah, I would say so."
98347,"Joel Spolsky","It's not your opinion that agile must be incremental. It's a fact that agile must be iterative and incremental."
98347,"Joel Spolsky","Anyone who says agile isn't incremental and iterative isn't a naysayer. They are just wrong. There isn't that much that's so cut and dry in software (especially when you get into process and methodology), but that's one of them."
98278,"Joel Spolsky","@Martin That's just from me. Introducing excessive amounts of fun, in my opinion, just shows a lack of professionalism, respect for the discipline, and detracts from the mission of efficiently producing high quality software. It's a waste of time and (since you are paying your engineers for this time) money."
98336,"Joel Spolsky","@Wayne Use cases can be derived from functional requirements. Use cases by themselves aren't necessary, but if you can't derive them, that's problematic and indicates you don't understand who your users are and what your software is supposed to do for them."
98840,"Joel Spolsky","Tried to make this less spammy. It's a great answer with full disclosure of the answerer's relationship to the company, but I wasn't a fan of the marketing speak and excessive adjectives like "great"".""
98905,"Joel Spolsky","You say that you notice "a big disparity between individuals of similar competency at answering questions on a whiteboard during an interview"". Are you sure that this is the case? Especially for a team-oriented field like software engineering"
98757,"Joel Spolsky","Have you thought about product line development instead of "one over-arching super configurable system to rule them all""? It's the idea that you create a family of products with a central core"
96068,"Joel Spolsky","@DPD What CMU offers is not an alternative to the CDSP. Like the IEEE's CDSP, they are world-recognized (especially the CMMI certifications). They are granted by a different organization and aren't necessarily rooted in the Software Engineering Body of Knowledge. What the SEI offers is mostly certification in the work that they do. The CSDP is a broad-ranging certificate that covers the breadth of software engineering. With the exception of the PMI's CAPM and PMP certifications (which cover the breath of project management), the others are geared to a very specific, fine grained topic."
99207,"Joel Spolsky","I'm not sure if I would use "young"" to describe software engineering. The field became well defined in the late 1960s at a NATO conference"
99244,"Joel Spolsky","It was mandated for DoD projects, up until the late 1990s (1997-1998, if I remember correctly). Ada code still exists, but more and more projects are being built using C, C++, Java, and even languages like Python are beginning to make inroads. I'm not saying it's not used - there's a ton of Ada code out there that is still good and can be reused, modified, or extended for projects, and it is. But not much new development uses Ada."
99453,"Joel Spolsky","@Mavrik That's true. If you have two functions, X and Y, and Y is faster than X (at least for your particular conditions), there's no reason to not use Y, if the code is still as readable and maintainable. But if you don't know about Y and you need to refactor code to use Y instead of X, and performance (of that code segment) isn't an issue, then there's no reason to make that change. It's all about tradeoffs - performance, time, cost, effort, readability/maintainability, and so on."
99635,"Joel Spolsky","@maple_shaft I find that interesting, since Winston Royce was the first person to discuss using this model on a software project and create the diagram that is familiar to everyone today, however people didn't keep reading to see why he said it shouldn't be used on a software project. If the person who first writes the idea says it's a bad one and states not only why, but how to do it right, why would people choose to latch onto it anyway? I wonder if it has to do with the first software engineers coming from mathematics and electrical engineering backgrounds. In EE, does this approach work?"
99635,"Joel Spolsky","@tdammers No one said it was wrong. However, people went wrong in trying to use a known flawed model to actually build large-scale software systems."
99659,"Joel Spolsky","There's more to formal methods than just proofs. It ranges from the heavily mathematical and use theorem provers that you mention to more lightweight methods that involve modeling using UML and OCL and creating a formal specification in Z. Yes, introducing any level of formal methods adds time and cost, but if you are building software that's in something that could kill or injure people (ranging from a pacemaker to an aircraft to a missile), spending the extra time and effort to verify and validate as much as possible could mean the difference between life and death."
99659,"Joel Spolsky","Absolutely. They have their place in mission and life critical software, to varying degrees depending on the system. After all, there are no silver bullets."
99453,"Joel Spolsky","@Rex I've typically seen smart phones and other mobile devices considered to be embedded systems. You function on similar constraints as limited (although not so much anymore) processing power and battery life. Financal systems are often real-time systems. Large amounts of data, if you need quick responses, would also be real-time systems."
99453,"Joel Spolsky","@Winston The definition of real-time system is "a system that must satisfy explicit bounded response-time constraints or risk severe consequences"
99453,"Joel Spolsky","@Winston "Quick"" by itself isn't. However"
99635,"Joel Spolsky","@Péter That sentence was a reference to a sentence in the Royce paper: "the implementation described above is risky and invites failure"". Yes"
99936,"Joel Spolsky","I worked as an intern for three teams at an Air Force Reseach Laboratory facility, once in developing production software, once in rapid prototyping, and a third time in verification and validation of contract work. Both development positions were agile. In fact, the production position was very close to Scrum, with less customer interaction (software delivered every few iterations, customer on-site every 3-6 months), and this was in 2006. I agree that customer buyin and understanding is the biggest problem, but some government agencies (or at least teams) are indeed embracing Agile methods."
100095,"Joel Spolsky","@JohnFx The original question was questionable. In fact, it was closed at one point because it was too open ended and invited long-standing discussion. Check out the post history to see what it was like before/after. I believe the downvotes are left over from the after."
100379,"Joel Spolsky","@Falcon I personally would count autogenerated code, but isolate it from hand-written code, as in count them separately. If you write code by hand, you really need to count it and there's no option. It becomes a little more vague for generated tools, and the important thing is consistency."
100367,"Joel Spolsky","There are valid metrics that don't make much sense for file size. An example would be defects/LOC. Defects/byte really doesn't make much sense to me. Also, parametric estimation tools use SLOC - I believe both COCOMO and SLIM use LOC as an input, and it's fairly easy to build a historical project database and use existing projects to estimate LOC for future projects."
100367,"Joel Spolsky","That makes sense. I didn't compare your post history to the post history of the question."
101135,"Joel Spolsky","I think your math is off. The shortest interview I've ever had was 2 hours. Most were 3-4 hours. One was a grueling 6 hours. Interviewing 10 people would be closer to 30-40 man-hours. For a large company, the rest of the post doesn't change - they could easily cover costs of interviewing 10 people. But for a smaller company, 30-40 hours interviewing 10 candidates is a lot of time, plus other engineers not doing work toward the product - getting some free labor out of it might be advantageous."
101117,"Joel Spolsky","C has compatability with C++. That is, valid C code (to some measurable extent) is also valid C++ code. C++ adds a number of features (classes come to mind) such that the reverse has never been true - it's incredibly simple to create valid C++ code that is (and has never been, and probably will never be) valid C code."
101117,"Joel Spolsky","@Ubiquité What do you mean by "fully compatible with C90""? There's no way I could take any meaningful C++ application and compile it with a C90 compiler. It's just not happening"
101117,"Joel Spolsky","@Ubiquité That means C90 is (mostly) compatible with C++11, not that C++11 is compatible with C90. Compatability in this instance is not bi-directional."
101242,"Joel Spolsky","Are you referring to what is discussed on http://www.uml-diagrams.org/class-diagrams.html#dependency? I've never seen the instanceOf stereotype, but I have seen <<creates>> and <<uses>> before."
101242,"Joel Spolsky","Interesting. I'll have to poke around. Although I'm familiar with UML, I've never dug into the formal spec and all of it's little intricies before."
101258,"Joel Spolsky","What do you mean "you have no way of knowing which one you are talking about""? Of course you do - scope.""
13784,"Joel Spolsky","Theoretically, yes, every piece of code should be reviewed in some way. However, in practice, this isn't always feasible on schedules and budgets - reviews take time and cost money. It's important to create levels of review (desk check, walkthrough, inspection) and determine which is appropriate for a given commit. Using techniques such as pair programming can also help (when done right, it's continuous code review)."
101764,"Joel Spolsky","@temptar That's no excuse. Even a legacy project can be added to source control at any time."
101770,"Joel Spolsky","I've seen the history/commit comment log as well. I don't understand it. It's trivial to extract that information from any decent version control system. And if you can't get at that information easily from your VCS, you probably have larger configuration management issues that should be addressed."
101770,"Joel Spolsky","@sdg Oh RCS. RCS was my first version control system, back in 2006, when I was taking my first CS courses. I suppose it made sense back when RCS was actually widely used, now that you bring that up. But you're absolutely right that technological advances have made it an archaic practice."
101352,"Joel Spolsky","I think this is the kind of question that raises the distinction between Java-the-language and Java-the-platform."
101791,"Joel Spolsky","If it's likely that the optimizations will happen, funding the analysis internally might be best, depending on the cost of that analysis and the size of the client's pockets. Perhaps eat a little cost up front to get a payday down the road."
101799,"Joel Spolsky","Are you interested in technologies or methodologies? Technologies don't matter that much on their own, outside of a context of the knowledge of the developers, a deployment environment, and the requirements specification. Methodologies depend on the schedule, budget, and team."
101799,"Joel Spolsky","Methodologies refer to the processes used to build software. There are various software development (or general project management) methodologies, ranging from plan-driven models such as waterfall to various iterative and/or incremental approaches such as the agile methods."
101799,"Joel Spolsky","What is your schedule and budget? Are there other developers, and if they are, what experiences do they have? Will someone else be maintaining this after you deliver, and if so, what experiences do they have? What environment will this be deployed in? How much of your requirements have you documented, or what state is your SRS (or other requirements capturing format) in? Answers to those questions will drive how you select technologies."
101799,"Joel Spolsky","There is no such general strategy when it comes to technology selection. There are only tradeoffs - better tools and libraries that come with a learning curve versus tools that are harder to use yet you are already knowledgable in. Ultimately, everything has to be based on the requirements of the project as those will add constraints to what you can or can't do. Unless you can add a lot more details to your question, I don't think anyone can give you any advice or suggestions. And there aren't really any tips that will apply to every project at every moment in time."
101835,"Joel Spolsky","PMD's default setting is to alert to a cyclomatic complexity of 10, as well. Looking at complexity on a per-method level also allows you to disregard methods that might have good reasons for high CC, such as generated `equals` methods."
101844,"Joel Spolsky","Application design and architecture is very different than user interface/experience design. You mention good program design and good interface design. Which are you interested in?"
101840,"Joel Spolsky","I've had jobs where I couldn't know who the client was - I was given a requirements spec and told to design and implement a system, and ask questions if there was anything unclear. Occassionally, the client would come on-site, and we wouldn't know anything about them other than their names. Depending on the current phase, developers might be asked to give presentations of varying technical detail on their work."
101770,"Joel Spolsky","@oosterwal I would suspect that would be in the document that specifies the software license, to identify blocks of code that are under a different license or specially licensed for use/used with permission. If you include your license on all source files, maybe, but I wouldn't include it otherwise."
29089,"Joel Spolsky","Eclipse supports regex searching of files, either as individual files, projects, or across projects in the same workspace. Regex replace is also supported to some extent, but I believe vim has a much more powerful regex capability."
102024,"Joel Spolsky","Overall, I would say tool integration as a whole - integration with version control, continuous integration server, bug tracker, compiler, debugger, profiler, static analysis, and so on. I would say the compiler and debugger integrated is a big deal, but having everything in one nice, neat little package is helpful."
102024,"Joel Spolsky","In Eclipse and NetBeans, a lot of what I mentioned is plug-in based, although there are lots of plug-ins (or modules or extensions) for vim and emacs, too, with different capabilities. I think that's what's nice about all of the tools - it's easy to choose what you want for you to be productive."
102143,"Joel Spolsky","I don't think your question is really about agile for solo developers, but rather related to documentation. As I said in my answer, moving to agile methods doesn't mean avoiding spending time writing documents, but instead focusing on ensuring that everything that you produce adds value to the project. (/cc @Anna)"
102349,"Joel Spolsky","@Prisoner I would highly recommend all of Scott Ambler's work - most of it is a straightforward read that's very informative."
102396,"Joel Spolsky","@BlackJack I brought back your title and refined the question a little more. I think the three of us got caught up stomping over the same post in the edit history. Should be good now."
102400,"Joel Spolsky","Best practices don't help get all projects done correctly in less time. They are simply things that have been observed to work well on most projects most of the time."
102650,"Joel Spolsky","Why do you want to follow Scrum more closely? Adhering to a specific process for the sake of adhering to it is pointless. Scrum is a framework for project management. Feel free to tailor it to fit your organization and the way your people best do their work. It will yield much higher productivity and ROI than following Scrum for the sake of following Scrum."
102815,"Joel Spolsky","@deltreme I don't care how IDEs would support them on the surface. How would IDEs find and process them in a manner is accurate yet maintains responsiveness? Adding tokens to a language or adding text processing has the potential to slow down parsing or yielding inaccurate results."
102815,"Joel Spolsky","@deltreme I don't think it would add that much time for most projects, but in terms of time added/value added, the ratio is very poor. If you had to add that additional few microseconds to tens of thousands of source files, you just added milliseconds to everything that ever parses a source file, every time you parse a source file. For an IDE, that would usually be every time you save. It would also be to your post-commit and/or daily builds. Compound those milliseconds and it very quickly becomes measurable in minutes over a project's lifetime to deal with a feature that adds no value."
102815,"Joel Spolsky","@deltreme Absolutely not. If you have disabled code in your project that's made it into source control, you're doing it wrong. Occassionally, if I'm rewriting a method, I might comment out the old method and reimplement it, but once I'm sure the new code passes tests and works as intended, I remove the disabled code and check it in. If you are actually checking in disabled code or relying on it in some way, that's a sign of larger problems in the project that need to be addressed."
102862,"Joel Spolsky","Steve McConnell's book Software Estimation: Demystifying the Black Art is really good on explaining how software engineers estimate. You can learn techniques and tools, but the only way to become good at estimation is to continually estimate, learn from your estimates, and repeat. As for no one consistently being able to meet estimates, there are organizations that consistently come within a couple of percentage points on their estimates - McConnell's book talks about organizations (often CMMI Level 4 or 5, with continuous improvement and detailed tracking) that achieve this consistently."
102861,"Joel Spolsky","Depending on the project management methodology, the PM might not even have the full list of tasks. In something like rolling wave project management, there's often a nebulous bucket that describes a very high level of task that's generally too large to estimate with any decent confidence level. As previous tasks are finished, tasks part of ths bucket are more well defined and can be estimated. In agile methods, tasks are frequently added, removed, or reprioritized at various points, again making it more difficult to estimate long-term milestones beyond a couple of iterations."
102871,"Joel Spolsky","@Thorbjørn Ravn Andersen Good call. I should clarify. However, if you are doing Java development, you usually have the JDK installed (although you might be running the OpenJDK or similar - I don't know if those come with VisualVM)."
102877,"Joel Spolsky","Software engineering is still younger (by far) than most other engineering disciplines at an age of 42 years. However, there are a number of mature estimation techniques and tools. Wideband delphi (developed in the 1970s, made popular by Barry Boehm's Software Engineering Economics in 1981), function points (1979), SEER-SEM (roots in the 1960s), proxy-based estimation (used in the PSP, developed in 1994 at the SEI), and COCOMO (1981) and COCOMO II (1997). In a field that's only 42 years, there are already nearly 40 years of work done in estimation of projects."
102817,"Joel Spolsky","@c00kiemonster What perspective is that? Who is your target audience? What do you hope to gain from this documentation? Based on your comments, I don't think you are going to find anything like what you expect. I would recommend picking up a book on software architecture (I recommend Software Architecture in Practice, I think it's on the second edition)."
62427,"Joel Spolsky","I'm not sure that age has anything to do with it. Don't most physical sciences used a right-handed coordinate system, and have for many, many more years than computers have been around? I would say that is a much older convention than the ones being followed by Glide and then DX."
102872,"Joel Spolsky","@Thorbjørn Ravn Andersen I'm not sure I always agree with the last sentence. There are some improvements that are hard to quantify, such as readability and maintainability. Often, optimized code is harder to read and maintain, but if your new code happens to be simpler or easier to maintain without having a negative effect on performance (or, perhaps even if it does decrease performance, but performance is still within specified limits), don't remove it."
102872,"Joel Spolsky","@Thorbjørn Ravn Andersen What I'm saying is if you make a change to improve performance, regardless of if the performance increases, decreases, or remains the same, as long as it is within spec, you need to consider factors that can't necessarily be quantified before deciding if you need to roll back the change or not. You shouldn't make a change based only on performance, unless it breaks the requirements. It's hard to prove readability or maintainability changes in the same sense as it is to prove performance changes."
102872,"Joel Spolsky","@Thorbjørn After performance tuning, you also need to retest the new code thoroughly. Saving time or memory is meaningless if you introduced a defect."
103375,"Joel Spolsky","Are these scripts run by users manually or automatically as part of some process? Who is the intended user?"
103436,"Joel Spolsky","@vorad Of course you can solve something easier with a nearly equivalent tool that you already know, that's a given. Python and Ruby aren't the same, but they are similar enough where most problems that could easily be solved with one can be just as easily solved with the other. I would recommend learning Ruby if you are going to be working with Rails. If you just want to learn a web framework, perhaps starting with Django might be better for someone coming from a Python background."
104296,"Joel Spolsky","@Cameron It depends on your industry. In the defense industry, certifications from the IEEE, PMI, (ISC)2, and the SEI's CMMI-related certificates are typically looked upon favorably. In fact, there are some positions in information security and a few secure environments that require a security certification, and the (ISC)2 CISSP certification is often used to meet this requirement."
104382,"Joel Spolsky","Just because your organization doesn't use TDD or unit testing doesn't mean that you can't, as long as you continue to meet your deadlines and produce quality code."
104400,"Joel Spolsky","@Toby Yeah, that was why I decided to throw in static analysis. If you can't test your code, you have problems. And if you have one problem with your code, there might be others. Use a tool to find potential warning flags, assess them, and correct as needed. You'll not only have more testable code, but more readable code as well."
104681,"Joel Spolsky","Improving estimation is not something that can be done with a short activity. It has to be a long-term effort to track your estimates, actual times, and some kind of postmortem to determine why the estimate and actual time were different. It's also a skill that develops over time - you get better by estimating and learning from your mistakes through analysis."
104671,"Joel Spolsky","What are the responsibilities of the line manager within your organization? If he's not the Product Owner, he should not be doing anything with the Product Backlog, other than to work with the team to estimate the tasks on it and assign tasks to a sprint. It's OK for him to be responsible for managerial roles (in fact, in my current job, my manager and software lead are two different people - my manager reports software status to the software lead, but signs the software lead's time card), but within the Scrum framework, he has no responsibilities to work with the product backlog."
104688,"Joel Spolsky","An implied requirement? Absolutely not. If the user wanted a bridge, they would ask for a bridge. If they didn't say it from the beginning, a good requirements engineer would ask about it. But it would absolutely not be shipped to the customer if it wasn't in the spec."
104688,"Joel Spolsky","@unforgiven3 That has nothing to do with estimation, though. The job of requirements engineering might fall to a developer, but you can only base your estimates off of known requirements. Improving your ability to analyze, verify, validate, and discover requirements is disjoint from improving your ability to estimate how long it will take to perform a task. Requirements change, estimates therefore change, but it's impossible to estimate what you don't know and you shouldn't be trying to."
104671,"Joel Spolsky","@Pomario By definition, the Product Owner is the voice of the customer. In Scrum (and other methodologies, both agile and traditional), tasks are prioritizied based on value added to the customer. The Product Owner is the one who best knows this information. If you don't understand the customer, how can you identify which tasks will add the most value? You can't. Therefore, the IT director should probably be taking on something closer to the role of Scrum Master and working to remove blocking issues and letting the development team get the job done."
104688,"Joel Spolsky","@unforgiven3 A good engineer should always be working on improving both. I've been in a position where I was not tasked with requirements engineering, but I was handed a spec that had what I saw were problems in it. Having the skill to see those and ask the right questions is essential for anyone developing software, and it does need to be worked on. However, when I am estimating, I always based my estimates on the spec, even if there are questions. I just leave a larger window for error (giving 75% chances instead of 85%, or giving a slightly larger window)."
104688,"Joel Spolsky","@maple_shaft This question is explicitly about improving estimation skills, though. If you need to improve estimation skills, your tasks should assume perfect requirements so that you can focus on the actual task of improving estimation. Introducing too many variables just makes it more difficult to learn and teach a concept."
104671,"Joel Spolsky","@Pomario Something, either the current role assignments or the process or the culture, needs to change. It makes absolutely no sense for someone to be the voice of the customer (Product Owner) yet they can't prioritize tasks on behalf of the customer. It also makes no sense (and violates the tenants of agile software development) that knowledge is kept in someone's head instead of in a location readily visible to all members of the development team (and the customer, when appropriate). Either fix these problems, live with these problems, or move on to a new job that has different problems."
104956,"Joel Spolsky","So you're saying that the estimation of time to write a test was provided by a manager who used Excel, and you want to know if the developer should meet these estimates and if tests written and executed within these estimates are trustworthy? Or am I misunderstanding?"
104961,"Joel Spolsky","1 and 2 are blatently false. Parametric estimation models are widely accepted in software project management and have been for well over 20 years, and anyone with project management training (software engineer or not) can be trained to use these tools, assuming that they (or, preferably, the project engineers) are able to provide accurate estimates of the inputs."
104956,"Joel Spolsky","@David Accepting an estimate generally refers to reviewing the estimations and ensuring consensus. For example, if a parametric estimation tool is used, having project engineers review that data to ensure consistency, perhaps using a second methodology such as Wideband Delphi."
104966,"Joel Spolsky","I haven't read those papers in full (yet), but parametric methods have been widely used to estimate software projects within 15% for well over 20 years, assuming that the input data is valid. In addition, collaborative methods such as Wideband Delphi can (and have been used) to confirm the accuracy of parametric models. See Software Engineering Economics (Boehm) for a discussion of parametric methods and applying Wideband Delphi on software projects (both with and without paremetric models as well)."
104960,"Joel Spolsky","@Treb Estimates should be as accurate as the provided data and current project status allow for, given the Cone of Uncertainty."
104961,"Joel Spolsky","@OrbWeaver The developer in question might not have given inputs, but a more senior developer or software lead might have. Anything else, I would need to see how the estimate was given. If it was along the lines of "Test X will take Y hours to design"
104961,"Joel Spolsky","@StevenV Software engineers should, according to the SE Code of Ethics and Professional Practice: "Ensure an appropriate method is used for any project on which they work or propose to work."" and ""Ensure realistic quantitative estimates of cost"
104266,"Joel Spolsky","@Lundin That book is how I learned C. I find the examples easy to read and understand, and at several points, it points out the use of unsafe methods, for which safe methods are discussed later in the book. What version did you look at, since absolutely nothing you wrote is true about the Second Edition."
105004,"Joel Spolsky","That's only true for evolutionary prototyping. In a throwaway prototype, you want to ensure two things - (1) the customer doesn't associate a prototype that demonstrates a UI with a mostly finished product and (2) you can't reuse the (most likely poorly designed) code in your final product."
105004,"Joel Spolsky","@Piskvor Do you know where that originally came from? I remember reading it somewhere, and I think I own that book (or  a book that cites that advice), but I can't remember what it's from."
104961,"Joel Spolsky","@StevenV Absolutely. You have to be somewhat tactful and professional about it."
104951,"Joel Spolsky","@Pomario Yes. A story is either finished or it's not finished. There is no "I'm N hours into an M hour story"" or ""I'm X% done with a story."" You have either finished the story according to your definition of done"
105033,"Joel Spolsky","You should care where the estimate is coming from. A parametric model with valid and reasonable inputs, a random number generator, a first year computer science student, a software engineer with 5 years of experience with less than 6 months in the domain, and a software engineer turned project manager with 25 years of experience in the domain all have a different capacity to produce an effective estimate. This also goes back to a comment I made on a previous answer about the ethical/professional responsibility of a software engineer to represent, defend, and challenge estimates appropriately."
104961,"Joel Spolsky","@Dunk That statement refers to an individual software developer, where you must only approve documents and statements that you agree with, otherwise you are obligated to raise an objection in the appropriate channels. However, if you want to see a prime example of consensus-building in software estimation, just look at Planning Poker and Wideband Delphi. Typically, you don't have agree on a single absolutely definite number, but a range and a confidence interval. It's fairly easy to agree on that, in my experiences."
105196,"Joel Spolsky","I would recommend reading the answers to http://programmers.stackexchange.com/questions/96638, http://programmers.stackexchange.com/questions/72529, and http://programmers.stackexchange.com/questions/18371. The first one is probably most relevant, but all might shed some light on your situation."
105228,"Joel Spolsky","@Matthew Even in git, changing history at any point is, in my opinion, a terrible idea. The history is supposed to serve as an audit trail and should never be changed by anyone at any point ever for any reason."
105228,"Joel Spolsky","@Matthew Changing any commit message, even in a non-public commit, destroys the auditing capability. In a DCVS, I not only want to audit the main branches that everyone is pushing to, but I want to be able to audit each individual developer if the need arises. If a developer can change their own history, how can I audit them?"
105179,"Joel Spolsky","Along the lines of what @Saeed asked, what kinds of infrastructure does your team/organization already have in place for knowledge management and sharing? Also, what are your current processes for writing specs and docs?"
105033,"Joel Spolsky","You agree with me saying that your answer is wrong? Given the same inputs (such as workload, resources, difficulty, etc.), the who is just as important as the what and why. It comes down to a trust factor. I trust COCOMO (made and maintained by some leading minds in software cost estimation) more than an Excel macro (made by someone with limited experience and knowledge in cost estimation, much less the application domain). It's all about the big picture to establish how trustworthy is this estimate."
105033,"Joel Spolsky","How do you determine the accuracy if you don't know who estimated and what methods they used? I could give the same data to two people - one is a first year software engineering student taking currently taking his first computer science course and the other is a senior software engineer with 15 years experience and 5 in the domain. Both use the same estimation methods (don't forget - often, inputs are estimates as well). The student can say it will take 6 months with a 95% confidence. The senior engineer can say it will take 15 months with 80% confidence. I'd trust the senior engineer more."
105033,"Joel Spolsky","In fact, that's the basis for a lot of what happens during planning poker and Wideband Delphi - the insights of the most experienced, most trusted people are weighted by others more. It's key to consensus building to decide who is most likely to be accurate and working with that data, regardless of the individual's confidence in their estimates. Any argument by a more experienced competent person is more likely to be valid, and unless you also have sufficient experience, you can't judge validity of arguments."
105228,"Joel Spolsky","@Joeri That's nothing to be worried about. If you work in a place where that's an issue, that's a sign of cultural problems. I've checked in some pretty bad trial code (messy, poorly performing, etc) to my private repositories or branches just so there would be an audit trail and history record. It shows what I was trying to do - perhaps someone else could learn from my mistakes, or even improve upon them. In my opinion, when working on a team project, there is no private code - everything should always be visible to anyone who wants to see it."
105228,"Joel Spolsky","@David You should be disiplined enough to not let that happen. If you aren't, that should be a point to address on your continuous improvement and personal development strategy."
105281,"Joel Spolsky","Why is this not specified in the contract? All documentation created should add value (or at least perceived value), for you, for future developers, or for the customer. You (should) know what documentation adds value for yourself and future developers, so ask your customer exactly what documentation is needed to add value, put it in the project plan, and get it signed off on."
105033,"Joel Spolsky","That's beside the point. A young developer (or even an experienced developer working in a new domain) needs to trust and learn from those with experience in the domain (since those are most likely to be the best estimators), to the point where he can judge the validity of arguments and discuss potential problems or concerns with it."
104966,"Joel Spolsky","I read those papers last night. They go against over 40 years of evidence in project management and over 30 years of evidence in software project management. See http://www.iiasa.ac.at/Admin/PUB/Documents/RM-75-071.pdf and http://sunset.usc.edu/csse/research/COCOMOII/cocomo_main.html"
105228,"Joel Spolsky","@David No, I read it right. You need to take care to ensure the quality and accuracy of your commit log messages, just as much as your requirements specs, your design docs, your code, and your tests. Confusing is one thing (your name is attached - you can be found and questions can be asked), but wrong or missing information in a commit message is unacceptable."
105228,"Joel Spolsky","@David No, the wrong information shouldn't be added in the first place. If it is, you are doing something wrong and that something needs to be corrected. A commit log is very much a formal document where accuracy and completeness is required. It all comes back to maintaining the integrity, authenticity, and non-repudiation of the history trail. Allowing anyone to make changes destroys that, therefore no one should be allowed to make changes."
105228,"Joel Spolsky","@David It has to be entered correctly from the moment it is submitted. There should be no factual or content errors in a commit log. If there are, you are doing it wrong and need to analyze and correct the problem. It is, after all, a formal record."
105228,"Joel Spolsky","@David My position is that a (1) the commit log is a formal record that needs to be valid at all points in time for the purpose of auditing (including in non-public branches or repositories), (2) a disciplined engineer should care enough about the commit log that there are no factual errors that require changes, and (3) making any changes to history, including appends, is in fact changing history (which is a violation of point 1)."
105278,"Joel Spolsky","I think this is talked about in the Metrics book, but I loaned it (along with all of my process textbooks) to the process group temporarily."
105465,"Joel Spolsky","@Thomas If you click on the link to the Project Proposal template (as an example), it brings you to a webpage that has a list of sections that are part of the Project Proposal document and the questions that should addressed by each section of the document."
105501,"Joel Spolsky","@Graham It's not. See the discussion on the question there. There is a distinct difference between estimating projects (how the original question was interpreted) and time estimation for tasks by individual programmers (original intent of that question). Per comments, that question was rolled back to be about software project estimation and this question created to be about task time estimation."
105501,"Joel Spolsky","@Matthew I tried to clean up both questions to make them more unique. Thoughts?"
105506,"Joel Spolsky","@Bruce I don't understand the first critisism. What do you mean "where's the code""? Could you elaborate on it? I totally see the second one"
105506,"Joel Spolsky","@Bruce Ah. I see what you mean. The only problem with that argument is that Humphrey spent a lot of his time researching software quality, process improvement, and project management at the SEI and teaching at CMU, after working as a manager (directory and later VP) at IBM. A lot of influential people in the process side of software engineering (Boehm, Brooks, Basili, Royce, Parnas) weren't prolific software developers (at least publicly available software, since a number worked in the defense industry for various contractors or the DoD)."
16707,"Joel Spolsky","Time tracking is only useful if you use it properly. A good number of metrics are based on time spent doing certain activities. Otherwise, it's just a number that determines how much you get paid."
105943,"Joel Spolsky","I don't think it's about prioritizing stories, but rather the deeper requirements. The stories should be prioritized by the customer. However, the "so that"" can be used to elicit additional requirements (functional"
105950,"Joel Spolsky","@Spammer The article I linked to discusses that. Also, browsing through the Java API documentation answers that. The only thing that you should do is add the `@Deprecated` annotation or the `@deprecated` JavaDoc tag. That's it - nothing else, nothing more."
105962,"Joel Spolsky","What you described is called the Five Whys (http://en.wikipedia.org/wiki/5_Whys) and it's generally useful in (software) engineering fields, ranging from requirements engineering to quality control to process improvement. It's probably a good skill to develop."
105645,"Joel Spolsky","@Thorbjørn I don't know why, but I can imagine that being scrawled in the margins of a notebook of a scientist of engineer just before he leaves the office and reaches the tipping point, losing all sanity."
85609,"Joel Spolsky","@Blrfl NRE stands for both non-recurring engineering and non-recurring expenditures, depending on the context."
106022,"Joel Spolsky","@bjarkef Both are under active development still. In fact, Jenkins was last updated on 29 August 2011 and Hudson was last updated on 30 August 2011. The projects are just run and maintained by different people - Hudson is run by Oracle, while Jenkins is run by former Hudson developers."
106191,"Joel Spolsky","What specifically do you want to build and what problem(s) are you trying to solve? There are a lot of web development languages, tools, libraries, and frameworks out there, and different problems will have different optimal solutions."
106191,"Joel Spolsky","@BDotA There is no one-size-fits-all solution that's good for everything. Without specific requirements (functional and non-functional), it's not possible to say that language X and framework Y will be your answer for building something for every client."
106248,"Joel Spolsky","@Andrew I have over 2 years of experience in US DoD work, as a government employee and as a contractor. Agile methods are being adopted. One team I worked on was actively using Scrum, producing "just enough"" documentation ""just in time"". Yes"
106231,"Joel Spolsky","@DeadMG There are times when it's appropriate to use a Singleton. Often, it's related to interfacing with hardware when multiple instances breaks the concept of the system. Also, if your team/project was using a language that had both, it would matter. Overall, that is one of the most comprehensive list of software engineering questions with an emphasis on OO implementation techniques out there."
106257,"Joel Spolsky","@pillmuncher So few people have read it, it's kind of sad."
106414,"Joel Spolsky","@Vinoth If that's company policy, then there's nothing you can do other than either writing them or seeking to change the policy. If you are using modern development tools, then that policy is out of date. What drives this policy? JavaDoc comments are turned into web pages and modern IDEs let you view the JavaDoc comments as you are writing software, regardless of where the comment comes from (explicit or inherited)."
106437,"Joel Spolsky","What do you mean by "the reviewer is not part of the project"""
106427,"Joel Spolsky","@Joel That's a good point. You do need to keep refactoring limited in scope to make deadlines."
106007,"Joel Spolsky","How do you know if it's for you or for others? At work, you can get reassigned or you could quit. Anything that you produce at work (in most cases) isn't yours, but it belongs to the company or the customer. If they can't understand or maintain it, the time lost is the time you spent developing it plus the time it takes someone else to understand it (and perhaps develop a new solution). Everything produced at work should be treated as something for someone else."
106450,"Joel Spolsky","At work, I don't think you should treat anything as "for yourself"". They are tools to support a project"
106450,"Joel Spolsky","That, to me, is extremely unprofessional and unethical. One of the ethical responsibilities of a software engineer is to act in the best interests of the client and employer, as long as it does not risk the public. Another ethical responsibilty is to be fair and supportive of colleagues. Keeping your tools to yourself when they are for a project violates both of these principles."
106450,"Joel Spolsky","Neither am I. If someone else needs to rename 10000 files, and they don't know that such a utility exists because you didn't put it in a tools repository or share it with others (even if you didn't make it, but just found a tool online), they will probably either waste time doing it manually or duplicate your work. Either way, your (in)actions wasted time and money."
106414,"Joel Spolsky","@dsimcha Perhaps, but if it's repeated, that could be bad for the job. This isn't a one-or-two-off thing."
106450,"Joel Spolsky","I do like the edit (I missed it before my last post) more, but I think reuse trumps the ability to create. Reinventing the wheel is overhead, reusing saves time and money (plus, reduces defects - if it's been used, it's been tested, and you know it will work, as opposed to something new and untested). You only create a (or preferably extend an existing) tool if you absolutely need to, and then, you properly share your creation or extension with as many people as you can. Reinventing tools because you can is a waste of resources on a project and I would hope that's frowned upon in any workplace"
106007,"Joel Spolsky","And if someone else needs to do the same or similar task later (which is very likely, in my experiences)? They have to reinvent the wheel. It's one thing to have a throwaway prototype work for solving a problem or learning a library or framework. It's another to spend time developing a tool to do a task and then just discarding it. The types of tools that the question is referring to are for tasks that potentially have to be done multiple times, and if other people do those tasks, they waste time by not having a tool to assist them (or needing to develop such a tool)."
106474,"Joel Spolsky","Really the only thing that I've never heard referred to as an artifact is code, but I don't see why code can't be an artifact."
106477,"Joel Spolsky","TL;DR stands for "too long; didn't read"". It's either a response to a post saying ""way too long"
1761,"Joel Spolsky","@Job I can't speak to the exact circumstances of the development of VBA for Excel, but that sounds like advanced R&D or prototyping was involved. There's a difference between advanced R&D and production systems. You can never work in the dark, alone, and isolated from your team. I'm not opposed to introducing new technologies, but it's important that everyone knows what these new technologies are, their benefits, their drawbacks, and how they are being deployed in a project. Doing something solo and in the dark is generally a bad idea and puts a project at risk."
106477,"Joel Spolsky","Do you really have so many people changing so many documents? That just seems like a Bad Idea to me. Things like requirements and functional specifications shouldn't be open to change by just anyone at any moment in time, as those documents capture the needs of the customer/client/user and drive the schedule, budget, design, implementation, and test procedure of the project. Could you elaborate more on your current configuration and change control policies?"
106490,"Joel Spolsky","When it comes to changes, tracking dates/times/logs in a version control tool as well as the document might be helpful. However, nothing beats having discipline even under tight deadlines and external pressures. Mistakes happen, but the only thing you can do is try to prevent them at every step of the way through careful execution of a plan."
106490,"Joel Spolsky","@Konerak No, and if I implied that somewhere, please point it out. You can view the history of a document (including "commit log"" style notes) and view old versions. We typically use revision tracking and notes to handle diffs"
1761,"Joel Spolsky","@systempuntoout That may be true now. But will it be in 6 months? Or a year? Software development, even if you are currently alone, should never be considered a solo task - you need to think of the future developer or maintainer of your work."
106530,"Joel Spolsky","Your last sentence is kind of confusing with the "not"" in there - is this intentional? Also"
106539,"Joel Spolsky","And this just scratches the surface. I didn't even talk about iterative models such as Boehm's spiral model nor the specific implementations of iterative and incremental models such as RUP, XP, and so on. But I hope it illustrates the difference between sequential and iterative/incremental."
106539,"Joel Spolsky","There are lots of methodologies. It's not Waterfall, since you have multiple releases at the end of a cycle. And your methodology might not have a name, either - processes are typically models that are tailored and tweaked to the project and the team. Giving the models names makes it easier to talk about them in an academic sense. When it comes to application, very rarely should anyone be implementing a model at face value."
106551,"Joel Spolsky","It's entirely possible to ship software every two weeks, or at least have potentially shippable software every two weeks, even if you decide to not ship."
106568,"Joel Spolsky","I'm not 100% sure you will find what you are looking for. The act of performing unit testing doesn't necessarily save any developer time, as it takes time to write the tests and then fix defects found. However, what you will find is data relating to the cost savings of finding and fixing defects early and improved product quality (and customer satisfaction). Unit testing is just one step a series of processes designed to improve product quality. I think you should refocus your efforts - sell product quality, with unit testing as a single tool among many to begin to move toward that goal."
106569,"Joel Spolsky","@Robert Harvey You are correct - this data is from Boehm. However, I'm not sure which work of his it's in. It's not Software Engineering Economics - I looked. I loaned McConnell's Rapid Development to a process engineer at work recently, but this study and two similar ones are cited in that book - if someone has a copy handy, they could look it up and provide citations."
106579,"Joel Spolsky","For me, the weight is first on the thought process, second on the algorithm and logic, and lastly on language (with bonus points going to pseudocode - it shows you can think abstractly). I would hire a good problem solver who can learn and adapt to languages before a master of a particular language (even if that language was my organization's current language of choice)."
106579,"Joel Spolsky","@dietbuddha If you want them to write code, you should have them write code in a realistic setting. If you have a team standard tool set, give them that. If you let your developers choose their tools, have them let you know what tools they want/need in advance of the interview. Writing code on a white board is not realistic, especially under the pressure of an interview (to me, an interview is much more pressure than a looming deadline). It's really not a good measure of skill or ability. Even better - ask to see code samples and speak to previous employers/coworkers/teachers/classmates."
106579,"Joel Spolsky","@dietbuddha I fail to see the relevance. That's actually a pretty good question...assuming you aren't looking for them to produce code that compiles. I've done mostly Java development work for almost 6 years now, with bits of other languages. I don't think I could write that in Java on a whiteboard error free. If you actually want code, I still stand by the assertion that you should give them the same tools they would have on-the-job in order to get a realistic sense of how they would perform."
106579,"Joel Spolsky","@dietbuddha Those points apply regardless of how your ask the question, implementation language or pseudocode - all three of them. A single interview question also can't identify any bad habits a developer might have as it's fairly easy to hide your bad habits for a brief time. I see no compelling evidence to say anything other than the fact that the single most important skills for a software engineer are problem solving and communication, both of which are best addressed by either putting the developer in a real-world situation using the standard tools or by using pseudocode."
106579,"Joel Spolsky","@Jack V. Does it matter? If you have well-written tests, things like wrong precedence on operators should be caught as that changes the results of computation. Again, the ability to think, reason, and communicate is far more important in an environment when you have tools and frameworks in place to support your development processes."
106647,"Joel Spolsky","Just curious, what version of Java are you developing with? Java 7 introduces some new language features that won't be covered in early resources."
106647,"Joel Spolsky","It depends on what version your target environment is running. Not all users have upgraded their runtime environment to Java 7. Anything developed for Java 6 (or previous) will run on Java 7, but since our customers aren't running Java 7 yet, we can't build for it. I also haven't upgraded my home computers to Java 7 yet."
106597,"Joel Spolsky","I'm curious as to the vote-to-close. It seems constructive to me. Not having buy-in to a process is detrimental to the project, and this is specifically about how to maintain programmer buy-in to a specific portion of the process."
106650,"Joel Spolsky","@Let_Me_Be The 2nd edition of the K&R book was published in 1988. There is no newer English version of the book. That edition covers ANSI C from 1988."
106694,"Joel Spolsky","Your last two sentences are especially true. Everything that I planned to discuss was either problems that I faced implementing a feature/fixing a defect, writing tests, or discovered during profiling and not just an overall critique of the design as a whole. Do you recommend documenting this in the design document or a separate document?"
106699,"Joel Spolsky","I like that format quite well. I might have to borrow/steal it to try it, if you don't mind. Perhaps I'll even corporate-templatize it and pass it around my team, if it works well for me and there's no objections from you."
106693,"Joel Spolsky","@Robert That seems very much like an answer to me, although perhaps expanding on what you would consider appropriate means."
106701,"Joel Spolsky","They aren't necessarily things that can be fixed, but most are "gotchas"" that many people might overlook or areas that aren't entirely obvious how they are related. A time-sensitive approach is a good idea"
106704,"Joel Spolsky","All documentation and knowledge is kept in Word documents, Excel spreadsheets, Visio or Rational diagrams, and PowerPoint presentations that are versioned. I would either need to add to the design document or create a new document with a tool and version that in the document repository for the project."
106694,"Joel Spolsky","Just to clarify more. An example is that I had a defect A that I fixed. However, when fixing A, I encountered several issues that were undocumented. This is now documented in the code, but needs to be captured somewhere else as well. It's typically below the class level and within methods, so these relationships and potential problems wouldn't be captured on a class diagram or sequence diagram. They can't be fixed or addressed with a reasonable amount of effort, and they don't cause functional or performance problems. How should I best capture this information outside of the code?"
106694,"Joel Spolsky","The code hasn't been changed, though. The problems still exist and have been documented in the form of comments. Now, I want to document them outside the code - is a design document appropriate for this discussion/documentation? If not, what should such a document look like? THose are my questions."
106694,"Joel Spolsky","You don't say **where** to document it. Everything you said is good and valuable advice, but you never answer the question of where it should go. Should it go into a design document or should it go into some other document? What are the advantages/disadvantages of those options, in your opinion? You mention what to document and what to avoid, but I already have considered this. I need to know where to put it for best presentation."
106694,"Joel Spolsky","I just reread my question. It's incredibly clear, to me anyway. The design document has to be updated to account for new classes, new functionality that were just completed. However, there are other issues that need to be documented somewhere. My question is, and right from the question itself: "Should I identify"
106694,"Joel Spolsky",""No one reads documentation in the first place"" - I think that's a fatal error. I know that I always read all associated documentation. In fact"
106763,"Joel Spolsky","I believe that this is your assumption: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.88.1151"
106863,"Joel Spolsky","Definitely that last sentence. I don't know why Jim, Bob, and Steve decided to design their app in this way, so I'm not even going to try to rationalize it. I can, though, make sure that a particular module or component is associated with requirement(s) and also rationalize decisions that I made."
106966,"Joel Spolsky","Also, I swear this question was asked already, but I can't find it and I didn't Star it as a favorite. Lots of questions about role definitions here, but I'm not seeing the PO/SM one that I'm pretty sure I read."
106966,"Joel Spolsky","@Anna That looks familiar, but it actually doesn't appear to be a duplicate. I guess this specific question might not have been asked before."
106966,"Joel Spolsky","@Anna That one is much closer, yes. If you think that is a duplicate, feel free to close this question. They seem close to me, but I'm not 100% sure if they are identical or exact duplicates."
107126,"Joel Spolsky","If the PO is not from the customer's organization (which is, from my understanding, frequently the case), then you'll still have to look at the contract if there's a dispute between the developing organization (including the PO) and the customer."
107134,"Joel Spolsky","That might be true. Every place I've ever worked, the "project level"" (the equivalent of POs and SMs) staff was devoted to a single project"
107186,"Joel Spolsky","What do you mean by "collect the points at the end""?""
107186,"Joel Spolsky","@S.Lott OK. I'm familiar with that activity, but I just didn't remember that phrasing. Is that what it's actually called?"
107235,"Joel Spolsky","Flow charts don't represent use cases at all. If you wanted to correlate a flow chart to a UML diagram, it would be more like a sequence diagram, communication diagram, or activity diagram. In fact, activity diagrams are meant to show workflows. What, in my opinion, makes UML activity diagrams better than a flowchart is that the symbols and terminology used is standardized, allowing for anyone (who knows it) to read it easily without having to look up the symbol meanings."
106971,"Joel Spolsky","@Pierre That link was posted in an answer. As I said in a response to that answer, all but 3 have counterarguments that I can come up with right here and now, and 3 is just so general that it applies to every job position ever."
106971,"Joel Spolsky","@Pierre If you can provide a good venue for me to address it, I can (and would love to). Unfortunately, adding it to my question would add unnecessary verbosity and noise and a comment is simply insufficient space."
107453,"Joel Spolsky","I don't think the statement "sometimes it is only possible using pointers"" is true. There are languages that don't expose pointers to the developer"
107453,"Joel Spolsky","@Jonathan Even so, if you can solve a problem in a language that doesn't expose pointers, then it's also possible to solve that problem in a language that does expose pointers without using pointers. That makes the first sentence true, but the second sentence false - there are (to the best of my knowledge) no problems that can't be solved without the use of pointers."
107633,"Joel Spolsky","You can't measure quality using a bug report, but you can measure quality, at least based on known issues. You can measure defects that affect each functional requirement and compute metrics based on the severity of the defect and priority of the requirement. You can measure complexity (which leads to an understanding of testability and maintainability). You can measure up-time, fault density, and compute MTTF. If you track the right information, you can produce a valid measure the overall quality of a system."
40508,"Joel Spolsky","What you are describing is often referred to as analysis paralysis (http://en.wikipedia.org/wiki/Analysis_paralysis) and is a known organizational anti-pattern."
107700,"Joel Spolsky","I believe the case of hardware is the example included in the GoF book. There are many times when having two pieces of hardware defies logic, and the Singleton enforces that on your application."
107802,"Joel Spolsky","The longest stand-up that I was involved with was 20 minutes, and that was because of an influx of people. We not only had the development team, but interns, co-ops, and one or two contractors. Not everyone always talked, but if a lot of people had relevant updates, it pushed the limits. At 20 minutes, attentions started to wander, so that became the cap, until the numbers decreased and we went back to 15 minute meetings. Typically, though, 15 minutes is a good time to shoot for."
107898,"Joel Spolsky","I have been Googling since before I asked this question and have yet to find any published papers or other reputable sources. Also, I fail to see how a metric related to SLOC can be poor. SLOC/time is a poor measure of productivity, but other SLOC-based metrics are usually considered valid, an example being defects/SLOC."
107921,"Joel Spolsky","That's probably a good starting point, but it should also be noted that you do need to tailor the process to your project, team, and organization so that it works for you. Just because other people have had luck with it doesn't mean it will work for you right out of the box."
107880,"Joel Spolsky","I'll have to read though some of those. Definitely something I'm interested in, but I am (at least right now), particularly interested in Halstead, so I'll be focusing there. I bookmarked the site so I can read it when I get some more time, but here's a +1 for the time being."
108049,"Joel Spolsky","I'm not entirely sure I agree with "version control is a tool not a concept"". Yes"
74707,"Joel Spolsky",""Secondly"
107898,"Joel Spolsky","That makes sense. Halstead's metrics are based on number of distinct and total operators and operands. It's common sense that a longer program will have more total operators/operands and will be more likely have more distinct operators/operands. The metrics of Volume and Difficulty could be obtained using SLOC instead of operators/operands. However, that doesn't address the validity, applications, and meaning (or lack of meaning) of the Effort, Time, and Bugs metrics. Even when computed with SLOC instead of operators/operands, do these metrics say anything meaningful about the system?"
107898,"Joel Spolsky","SLOC is easier to count, and probably more useful. Estimates of SLOC are used by several cost estimation techniques, tracked in the PSP and TSP, and can be used in other metrics such as defect density. That, to me, says counting SLOC might be better than counting operators/operands. Second, and unanswered so far, is the validity of the metrics of Effort, Time, and Bugs, regardless of what measurements are used to compute them. I agree that computing them with SLOC might be better, but even if I did, would they mean anything?"
107655,"Joel Spolsky","Thanks for that. I'll update the question and refocus my search effort son older papers."
108051,"Joel Spolsky","The thought of not learning about and using version control in university is not only foreign to me, but also down-right frightening."
108101,"Joel Spolsky","@jhocking Attendance is a reasonable measure, when used properly. If I took a lot of time off without explaining it, my supervisor would question it. It's not about how often you take off, but instead why you take time off and if you continue to meet deadlines when you are in."
108274,"Joel Spolsky","What docs are you referring to? What tools or languages are you using? For example, I know that the Java documentation clearly specifies the syntax and usage of that particular flavor of regular expression."
108274,"Joel Spolsky","@Rook I'm thinking along the same lines as FrustratedWithFormsDesigner. Somewhere, it's specified that a language uses PCRE or some other variant. I know it's in the Java docs, and I'm pretty sure it's in the MSDN docs for C#, and so on. I'm curious as to what tools or languages don't specify it somewhere. Besides, many are similar to each other - knowing one flavor makes it fairly straightforward to read and write another."
108274,"Joel Spolsky","@JW01 Can you reword or update your question, then? Your title question and closing question don't match. One is asking why tools/languages don't document the syntax they use, and in my experiences, they all do. The second is asking what syntax people expect. Exactly what do you want answered here?"
108086,"Joel Spolsky","Has he asked why he was rejected following each interview? Are there technical reasons? Is he applying to positions that he is potentially over-qualified (or coming off as over-qualified) for? Right now, I read this the same way as a "I wasn't hired for a job"
108086,"Joel Spolsky","@Paul Those are really questions that need to be asked. I know that every time I've ever gotten a rejection notice from a company, I've always emailed them back, thanking them for their time/consideration, and asking for reasons why I wasn't hired. It helped me improve for the next interview."
107775,"Joel Spolsky","The crucial problem is determining how you update size. It's not easy (in fact, nearly impossible, given the ninety-ninety rule), to quantify how many hours (or how many points) are left to develop a software component. The only thing you know is that your estimate was wrong, and when you finish, how much you were off by."
108476,"Joel Spolsky","I think the most relevant questions are http://programmers.stackexchange.com/questions/66949/do-you-use-project-management-on-your-personal-projects (project management for solo developers) and http://programmers.stackexchange.com/questions/27147/version-control-for-independent-developers (version control for solo developers)."
108548,"Joel Spolsky","Are you saying that you don't have version control now? Can you describe your current project infrastructure? What supporting tools and documents are you using or generating?"
108548,"Joel Spolsky","Very basic? That's an understatement."
108786,"Joel Spolsky","@DeadMG It's not "craptastic"" at all. You do need to tailor the questions to your specific environment"
108800,"Joel Spolsky","From an HRM standpoint, you aren't going to find any scientific studies (or even case study analyses) of particular interview questions. However, you might be able to find studies that focus on a particular interview technique and it's effectiveness for assessing certain qualities of a candidate."
108871,"Joel Spolsky","@ChaosPandion I'm not sure what you mean by that. A design pattern is a recurring solution to similar problems. Just about every language, every paradigm, and every application domain has patterns that emerge."
108871,"Joel Spolsky","@ChaosPandion Ah. I read your comment and left mine before I read Jon's answer, which I promptly +1'd after reading."
108883,"Joel Spolsky","CVS is definitely an old system that has been superseded by SVN (among others), but I don't think if I'd go so far as to say it will "rot your brain and teach you bad habits"". Using any version control is better than using none"
109058,"Joel Spolsky","@Falcon You can't blindly trust any tool - doing so will just cause more headaches. I think the Pragmatic Programmer's tip "care about your craft"" applies here. CodePro does contain a test editor to make it trivial to see what values are being passed in and what the expected result is"
109058,"Joel Spolsky","@Falcon Yeah, ideally some tests should be written first, but until you have an implementation and can do white-box testing, you don't necessarily see all of the different edge cases that you can see once you have an implementation. If you get a chance to play with CodePro's test generation features, could you post your thoughts somewhere and somehow get me a link? I'm interested to see how well it works and other people's experience with it."
109332,"Joel Spolsky","@KalleH.Väravas It doesn't matter where it is, but the fact that you wrote it to begin with. One could even make the argument that putting it in a development environment and not the production environment is even worse, as the two environments are no longer identical and it becomes just another variable to address during development and deployment."
109334,"Joel Spolsky","I think this is a good question, but I'm wondering if it will get more appropriate visibility on Project Management. These issues typically transcend software development and can be applied to any team in any project setting. Also, @S.Lott it does matter very much. However, there isn't a winner because both work (and work well) under certain conditions. Unfortunately, I'm on a really short break between tasks, so I don't have time to answer right now. I will be providing an answer as soon as I get more time."
109409,"Joel Spolsky","@MarkTrapp If we removed the definitions, could we reopen? Both the definitions in the post as well as the existing answer are wrong in terms of the formal definition of the phrase. There are duplicates on Stack Overflow, but none that I can find here and I think it's essential to, at the very least, not put more false information on the Internet."
109409,"Joel Spolsky","@MarkTrapp Then deletion should happen unless someone else can improve the question beyond my edit, since there isn't a question without confirming the definitions. Every definition here (question and answer) is wrong per McConnell's Rapid Development and (as I just checked) Sommerville's Software Engineering (8th Edition). Leaving it is spreading false information."
109409,"Joel Spolsky","@Mark Fantastic. Thanks. Working on my answer now."
109409,"Joel Spolsky","@Mark If you feel this is a bad question still, feel free to close (and make my answer a wiki as well, if that's necessary - I don't give a damn about the rep). I just feel better knowing that the correct information is on the Internet and people who read this question from Google won't see wrong. (Yes, I did another of my SOMEONE IS WRONG ON THE INTERNET!!! moments, but it's all good now.) Thanks a ton."
109523,"Joel Spolsky","Do you need to meet any particular standards, for example ISO or CMMI certification? If you do, convincing management becomes significantly easier. Aside from that...good luck. If you can't convince other developers even after showing them the benefits, I'm not sure how you can convince management."
109523,"Joel Spolsky","Well there goes that idea, since you can tie commit log messages into a meeting the goals of a few KPAs from CMMI (and I'm assuming various ISO standards as well, although I'm not as familiar with those as I am with CMMI), it would be easy to convince management that they will serve a goal with auditing and force developers to follow them. But without that, it's tough to implement process improvement without support from the developers and other hands-on people."
109523,"Joel Spolsky","Actually, @FrustratedWithFormsDesigner, that would work for any status meetings. I should start doing that for my weekly status reports/meetings. Although more recently, I've been working on non-code tasks, where the documents are in SharePoint instead of version control, and I'm not sure how to do that for SharePoint."
109589,"Joel Spolsky","The statement about the IEEE isn't true. Their Computer Society focuses on all aspects of software development, including (but not limited to) communication protocols, web development, and distributed applications. Other societies or groups do have different focuses, including hardware and radio communication."
109589,"Joel Spolsky","@ZJR I wasn't necessarily referring to standards, but rather the research and development efforts by members of the IEEE."
109910,"Joel Spolsky","How are you asking for requirements? Are you simply going to the customer/user and saying "can I have requirements?"" or are you using any of the various techniques to elicit"
109910,"Joel Spolsky","@Ryan I'm asking what techniques are you using now? You don't specify this. You say you are asking. What does that mean? Unless you describe exactly what you are doing now, the kinds of questions you are asking, and how you are going about trying to get the information you need, I can't tell you what the next steps should be."
109933,"Joel Spolsky","@John Isaacks It's one thing to have a dev server on the Internet. It's another to have it publically available on the Internet."
109945,"Joel Spolsky","That's the name for the functionality provided in C# (and perhaps other .NET languages?) that is similar to this, but it's not really the same thing."
109935,"Joel Spolsky","@HLGEM Very true, very true. In fact, I'm pretty sure I've given that advice on this site before."
109945,"Joel Spolsky","I don't see how. "Properties are read and written like fields"""
109945,"Joel Spolsky","@yannis This isn't correct. JavaScript has a syntax for properties, and it is not what you described in the original question at all. See http://en.wikipedia.org/wiki/Property_(programming)#JavaScript for how to implement and use properties in JavaScript."
110056,"Joel Spolsky","With a desktop application, why do you assume that there has to be two databases? Why can't a desktop application and a web application interface with the same database?"
110078,"Joel Spolsky","Not only is a timer a good idea, I believe it's recommended (perhaps someone with Agile Planning and Estimation can confirm this). My understanding is that, like most activities, planning poker sessions are to be timeboxed to prevent situations like what the question is referring to."
110332,"Joel Spolsky","I don't understand why you aren't just fixing the defect and making the fix a separate method."
110437,"Joel Spolsky","How is this helpful? You can't get any meaningful information by generalizing all freelance developers with ~10 years of experience, nor will anyone's experience with different individuals help you. You're interviewing them, so you (and perhaps other members of your team) have interacted with them. Are they qualified? Are they a good personality fit for the team? What exactly else are you looking for?"
110551,"Joel Spolsky","@WyattBarnett Yes, it's slow, but it encourages the developer to read the code and carefully observe the value of variables. In what environments is it not supports? I've used stepping-debuggers in Java, Scala, C, C++, and Scheme. I know that Visual Studio provides it for all of the .NET languages as well. That should cover most code produced by corporations."
110901,"Joel Spolsky","I don't understand why you can't do this with appropriate uses of repositories, branching and tagging in the VCS of your choice."
110987,"Joel Spolsky",""Assume"
110987,"Joel Spolsky","@Scott I'm trying to assertain if "write a test that demonstrates the bug"" is an appropriate answer or not. It depends on the nature of the bug. So"
111266,"Joel Spolsky","Provide proof, please."
111301,"Joel Spolsky","I totally need to answer this when I get more time. I've actually applied agile techniques on government contract projects and worked on an agile team within the government. But alas, my compile/test/distribute script is almost done. I'll be coming back later."
111402,"Joel Spolsky","If I missed anything, let me know. I hit the major points that I can think of."
111402,"Joel Spolsky","@maple_shaft Unfortunately, I can't speak to the business, program, or contract side of things. I'm aware of various contractual obligations and things that I've had to do or documents I've had to produce to fulfill them, but I've only been an engineer and never involved with the project or program side of things. You definitely need business and legal on that contract and making sure that you can do what you intend to do."
111423,"Joel Spolsky","What's the purpose for this project? Education, experience, to build a project portfolio? Depending on your purposes, it might be better to press onward with your current solutions and have a more robust, polished product rather than worry about targeting a number of environments."
111471,"Joel Spolsky","@SK-logic I've never used Common Lisp, so I can [only read what Wikipedia says](http://en.wikipedia.org/wiki/Common_Lisp#Compiler_and_Interpreter) and any other Internet resources (including your comment) on the subject. According to Wikipedia, both compilation and interpretation of the language are supported. From Wikipedia, it reminds me of the JIT compilation of Java, where the compiler can be invoked during interpreted execution of the language, but I'm not familiar enough to say that is an accurate description and I can only speak to languages that I know how they work at some level."
111471,"Joel Spolsky","@SK-logic But the compiler is a separate application or process (or even thread) that is invoked, comes to the foreground, performs its  compilation, and then returns to the background? If that's the case, it still fits the definition above. The compiler process takes over, performs its work, and then the application is executed - two distinct loci of control."
111471,"Joel Spolsky","@SK-logic Interesting. But I still don't see how it isn't two loci of control. The compilation starts, the compilation ends, there's a nontrivial transformation (Lisp -> a memory representation of the code) written to memory, the memory representation of the code executes. There's a distinct "compilation"" phase and a distinct ""execution"" phase"
111471,"Joel Spolsky","@SK-logic I can't speak to .NET as I'm not familiar enough with it's compilation system. I can speak to Java's, though, if that's similar."
111201,"Joel Spolsky","@mikelong If you want more, look into other leadership and organizational behavior topics - those would be the types of resources that would discuss this in more detail."
111665,"Joel Spolsky","I attributed McConnell's Thrashing/Process/Productivity graph to solve that. If you don't introduce new people, you get used to the communication overhead involved in the project early and maintaining the appropriate communication becomes easier and more natural. This breaks down under Brooks' Law, when you add people to a project late, which would be the same as introducing process late to a project - an increase in communication channels means an increase in thrashing and a breakdown of communication that leads to defects. I might be off base on that, though. Your reasoning might be valid."
111657,"Joel Spolsky","@Oded Adding people late is not mentioned at all. Also, Brooks' law says nothing about defects, but an increase in communication channels to make decisions and keep people informed. I would suspect that, like Karl Bielefeldt suggests, communication difficulties might lead to defects."
111659,"Joel Spolsky","The only problem with this is that change (specifically an increase) in staffing over time is not mentioned. It just says that if you have a project with n people, you will have m defects. Adding people does introduce communication overhead and problems, but that (from what I can tell) is beyond the scope of the simple relationship between people-defects. I do agree that a side effect of adding people late is not only an increase in communication channels and the need to train people and bring them up to speed (Brooks' Law), but also a potential increase in defects. But that's out of scope."
111657,"Joel Spolsky","@ironcode The number of developers on a project should be dictated by the size and scope of the project, and how it's organized. Having too many developers or adding too many developers later are signs of poor management, perhaps a death march."
111676,"Joel Spolsky","For your example with Windows, I'm sure that Windows also has more opportunities for defects simply because it's larger. If one developer wrote a system that was 10 SLOC and a system that was 10000 SLOC, the system with 10000 SLOC would have a greater chance of having a defect (which includes typos that prevent compilation, missing semicolons, logic errors, and so on). Typically, larger projects would have more engineers, but the relationship isn't between the number of people and defects, but size and defects."
111676,"Joel Spolsky","@Jeff They would be. But you would compare defects to the size and complexity, not to the number of people. As size and complexity increase, defects increase **and** number of people increase. So yes, although the number of people do increase, that increase in people doesn't increase the number of defects."
111676,"Joel Spolsky","@Daniel My quote is taken in it's full context. It's a bullet point on a slide and the presenter notes do not address it. People who were at the presentation also can not explain it, and tell me that it wasn't addressed there, either, but see my point about complexity driving up number of people and number of defects, rather than number of people driving up number of defects."
111676,"Joel Spolsky","@Jeff It's not mentioned as a proportional increase, and I don't think I every suggested it was. Part of the point of using SLIM is to estimate duration, effort, and cost of a project."
111659,"Joel Spolsky","The point of SLIM (and other estimation tools, when used properly) is to help with estimation of the needed number of people, cost of a project, time required, and so on. However, that does require the tool to be understood and used properly."
111657,"Joel Spolsky","@Jeff Haven't found anything in regards to research studies on that. Most of what I've found compares complexity and size to defects, not development staff size to defects. There's got to be something, though. It seems like a fairly common question. I'll keep poking after work."
111657,"Joel Spolsky","@psr Effort is people-time (person-years, person-months, etc.) applied to the project. I'll edit my post to also reflect this."
111657,"Joel Spolsky","@psr Size is any of a number of measures, according to this text. It's use cases, function points, SLOC, and a few others that I've never heard of before. I'll also add that to the post. However, there are no hard numbers as to "this project with n engineers and m size had x defects"
112072,"Joel Spolsky","It's not long polling. In long polling, there is a long timeout on a request. The request/response isn't "never ending"" at all.""
112091,"Joel Spolsky","How is reviewing cheaper than automated testing? Assuming you write a test once, review a test once, and have a stable test suite, you should be spending far less time and money executing tests than it takes to perform any kind of review (over the life of the project). Also, aiming for 100% code coverage is a waste of resources, which might be to the reason for the greater time/cost of testing. I also question the 30 minutes in reviews - we might review a module for 30 minutes, but there's the prep time of reading the code initially, understanding its role in the system, and commenting on it."
112105,"Joel Spolsky","@aceinthehole Are you referring to complex event processing or event stream processing? I'm not sure about particular patterns, but (as of a couple of years ago) the canonical book on the subject is David Luckham's The Power of Events (2002). There are probably more resources and libraries out there that are newer if you search around for the terms I mentioned."
112091,"Joel Spolsky","@MSalters That's why you write automated integration and system tests as well as unit tests. Really, the only tests that might need to be performed manually are acceptance tests. And by reviewing the tests upon creation would help to ensure that the most critical cases are tested."
112266,"Joel Spolsky","Some agile methods are at the project management level (Scrum) while others are at the development task level (Extreme Programming). You also say that agile methods start at the top, however process improvement (regardless of the methodologies or goals) tends to be more accepted when coming from the bottom up, and you get buy-in from each level starting with developers/engineers on the floor up through the management chain."
112294,"Joel Spolsky",""The project consists of 7 packages"
112308,"Joel Spolsky","What bug tracking tool are you using? Specifically, why are you not keeping all communication about the defect in that tool?"
112306,"Joel Spolsky","@Martin That post gets a few definitions and concepts, including TDD and integration testing, wrong, at least based on the standard definitions that I've learned."
112308,"Joel Spolsky","@deadalnix I'm not sure that's necessary. Do customers know how to use the tool? It would be better to have defects reported via some other means and then have internal staff search the bug database and manage adding and updating defects as additional reports come in."
112308,"Joel Spolsky","@deadalnix In my experiences, customers don't care enough to learn the tool or the processes you use to develop, so don't expose it to them. Let your front-line tech support deal with the people reporting the problems, getting information and recording it appropriately."
112642,"Joel Spolsky","I'm voting to re-open, since I couldn't find a duplicate. I think it's constructive to ask about how frequently users can or will tolerate updates, and I think such a question applies to much more than the Android Market, but to all software."
112653,"Joel Spolsky","I'm actually heading out of work as soon as this build finishes successfully, but I'll take this on when I get home. I'm more familiar with the PSP than the TSP, but I should be able to address this."
112806,"Joel Spolsky","@DXM Find out why they don't want to do those things, especially if they find the existance of the documents helpful. One of the things that the agile methods are really good at is continuous improvements through your retrospectives after each iteration. Having people who are fighting the process and artifacts is only going to be a hinderance to the rest of the team, so try to figure out what the problem is and deal with it appropriately."
112953,"Joel Spolsky","@Michael Similar, but not an exact duplicate. The answers are very similar, but they actually are two different concerns. This one is about little snippits of code - a couple of classes, a method or two. The other is about reproducing an entire project."
113416,"Joel Spolsky","@Tom Squires Do all classes (now and potential future) that would implement this interface have the ability to change their status and/or activation date? If these methods are taking parameters, would all classes that implement this interface take the same parameters when changing status and/or activation date?"
113416,"Joel Spolsky","@TomSquires If you have a class hierarchy of requests, then the capability to change request can go into the interface, as long as you have it accept the highest possible class in the request class hierarchy. Then, each class can validate the arguments to ensure that it can handle it, using return types and/or exceptions to deal with invalid data."
113504,"Joel Spolsky","I'm not entirely sure that you need to be registered to seek actual damages, per the Berne Convention. Admittedly, copyright law changes quickly and I took an intellectual property course about 4 years ago now, my understanding is that the Berne Convention requires signing nations (including the US) to automatically apply copyright to all created works without registration and allow for copyright holders to seek damages without registration."
113504,"Joel Spolsky","That's the only reference to it I can find, though. Every other web page that I can find and that appears to be trustworthy indicates that it's a violation of the Berne Convention to prevent copyright holders from seeking actual damages (and some sources even say actual damages plus attorney fees) in court. Perhaps there's a specific, legal defintion of "infringement suit"" that specifically means statutory damages?""
113504,"Joel Spolsky","@Chad That's a different point all together. The Berne Convention, signed by the US, requires that any copyright holder seek actual damages without the need for registration, yet the US Copyright Office says this is not the case."
113504,"Joel Spolsky","@Chad Registration is allowed under the Berne Convention, as long as the ability to seek actual damages does not hinge on registration. It's up to a country's legislature to determine if and when to allow for statutory damages. I don't see anything in that article you linked to suggesting anything else. I'm definitly going to dig deeper when I get home, though."
113636,"Joel Spolsky","Have you read [Driving Technical Change](http://www.amazon.com/Driving-Technical-Change-Terrence-Ryan/dp/1934356603)? It's a Pragmatic Programmers book that might be relevant. It presents patterns of people who oppose changes and techniques for overcoming these particular groups of people. I'm still reading it, and I don't have it next to me now, so I can't quote it, but it sounds relevant to your problem."
113673,"Joel Spolsky","@Mike Wills Security by obscurity isn't obscurity. Who cares who can find the admin tools, as long as they can't authenticate as an admin user and use the tools."
113893,"Joel Spolsky","@JohnM Have they told you that they want the functionality? Have they told you that they want it viewable from inside the application? Don't gold plate. Complete only the established requirements, and achieve them in the simplest possible manner."
114624,"Joel Spolsky","@JörgWMittag Pretty much. But I'm also saying that it's just a pattern used to simplify communication between system architects, application designers, and programmers. In reality, it's a special case of the n-tier architecture which is a special case of the client-server architecture."
114707,"Joel Spolsky","I'm not asking for legal advice. I'm just trying to figure out what I need to be aware of. Software licensing is on-topic per the FAQ and discusisons on Meta."
114878,"Joel Spolsky","@PéterTörök For unit tests, it depends on who writes the tests. That's absolutely true if the same developer writes the tests and the code. If one developer writes the tests and one writes the code, then you have two developers' interpretations and can see problems sooner. As for different levels of testing, I'm using the term "test"" to refer to unit"
114889,"Joel Spolsky","Also, of that list, Scheme, Common Lisp, and Clojure are incredible closely related to each other. F# and ML are also closely related."
114887,"Joel Spolsky","@FUZxxl Thanks for that. I own a copy of the book - I was unaware it was freely available as well."
114887,"Joel Spolsky","@FUZxxl That might be true. Prior to starting to learn Haskell on my own, I was exposed to Scheme and Standard ML in coursework, so I had some functional experience. The book was highly recommended by a friend, and it is a fantastic book, but I can't judge it from the perspective of someone without a functional background."
114951,"Joel Spolsky","Why do you want to switch to agile methods? What do you hope to accomplish? Who is making this decision? Do any of your team members have any experience with any agile methods?"
115105,"Joel Spolsky","What type of Java application - JSE, JEE, JME?"
113636,"Joel Spolsky","@JPM I don't feel that's fleshed out enough for an answer. However, I have finished reading it and when I get home, I'll expand on it to make it a more viable answer."
115181,"Joel Spolsky","The problem with using TDD without knowing where you defects come from are that it will only help with finding problems in the code. Testing the code doesn't do anything to verify or validate your requirements and design nor does it compare your implementation against the design."
115194,"Joel Spolsky","The problem with using TDD without knowing where you defects come from are that it will only help with finding problems in the code. Testing the code doesn't do anything to verify or validate your requirements and design nor does it compare your implementation against the design."
115420,"Joel Spolsky",""Most popular object-oriented programming language in the world""? I'm not sure about that claim at all.""
115557,"Joel Spolsky","Suggesting a specific SDLC without knowing the nature of the project and team is dangerous (for example, Scrum is inappropriate for a team of fewer than 5 or a team of more than 10, and jumping into Scrum without adequate research, buy-in, and cultural adjustments is setting up projects for failure), however the discussion of measuring the focus factor is indeed relevant and could be useful in any methodology, including plan-driven methodologies."
115555,"Joel Spolsky","@ThomasClayson How is that not applicable in practice? It's a well known fact of project management (of all types, not just software) that you can only control two of size/scope, cost, and time/effort, and the third is dictated by the other two."
115590,"Joel Spolsky","For a mission-critical system, we have a requirement that says "this system must remain operational for n hours"" and we test and document externally that the system operates for n hours. We might also internally document that we did a test for m > n hours and the system still functioned. For a game"
115555,"Joel Spolsky","@ThomasClayson That doesn't change the fact that the project triangle is truth. If your company doesn't understand simple project management, it might be time to leave."
113636,"Joel Spolsky","@JPM I have now expanded on my comment and created an answer."
116037,"Joel Spolsky","I agree - I don't like the comparison between "agile"" and ""disciplined"". ""Agile"" versus ""plan-driven"" is much better"
116037,"Joel Spolsky","Spiral is much closer - it clearly defines phases and some documents (requirements, conops, development plans, test plans and procedures) and technical outputs (prototypes, a final product). I would say that and Cap Gemini SDM are much closer to what I'm looking for (could you add SDM to your post?). +1."
116032,"Joel Spolsky","@John Plan-driven methodologies are centered on applying traditional engineering techniques and moving systematically from requirements through, ultimately, a delivery product, while performing verification and validation at step. They are characterized by strong documentation and traceability through the life of the system. There are detailed plans, workflows, and work products (that are things other than working software)."
116383,"Joel Spolsky","LOC is not a bad metric, but rather misused. It's actually not even a metric at all, but a measurement. For example, calculating productivity in LOC/time is a bad metric, but defects/LOC can be used to apply Six Sigma to software (Six Sigma -> around 3-4 defects per million opportunities, where a software "opportunity"" could be a line of code)"
116392,"Joel Spolsky","Is my code formatted weird for anyone else? If it is, could someone try to fix it."
116392,"Joel Spolsky","@Gabriel Because it's not a stupid question. Asking what to measure or calculate is a component of empirical software engineering and software quality."
116446,"Joel Spolsky","@AlexLocust That's correct, however it doesn't necessarily need to be stated like that. Saying "The system shall have a downtime of no more than 4 hours per year"" is correct as well - success is building a system with reliability and maintainability characteristics such that it can remain up for all but 4 hours of the year.""
116678,"Joel Spolsky","What type of development work do you do (or want to do, if you aren't doing it right now)? I don't see this being useful in web development, but I have seen a lot of bitwise operations in embedded systems work."
116678,"Joel Spolsky","If I'm hiring someone to do user interface development or web development, bit manipulation isn't something I'd ask about because, chances are, they will never see it. However, I would expect someone working with network protocols, embedded systems, and device driver work to be familiar with it."
116360,"Joel Spolsky","I'm surprised you'd go with the Code of Ethics for Professional Engineers over the [Software Engineering Code of Ethics and Professional Practice](https://ethics.acm.org/code-of-ethics/software-engineering-code/). They are actually pretty similar in terms of content, though."
116715,"Joel Spolsky","What type of education do you have? How long have you been in your current position?"
116716,"Joel Spolsky","This was stated in the original question: "...what type of things or opportunities should I be looking out for that will help me progress my career to a more managerial role"
116715,"Joel Spolsky","Would you mind saying what university? I'm just curious what your academic background is at this point, as I have a few ideas, but I'm not sure which one would be the best for you."
116717,"Joel Spolsky","Maybe it's just me, but I would tend toward a software engineering management degree or an engineering management degree, especially if you wanted to go into technical management or leadership. I've seen engineers get an MBA and get shoved into the business side of a software program, not actually managing or leading the engineers."
116715,"Joel Spolsky","@AaronMcIver It depends on where you work. Some PMs are business, some PMs are more technical in nature. In some places, "engineering manager"" might be a more common title"
116360,"Joel Spolsky","@DaveMarkle That makes sense, then. But I'm not a computer scientist either. I'm a software engineer (by title and degree)."
116774,"Joel Spolsky","@Ramhound I'm not sure about Visual Studio, but can the Express versions be used to create commercial/for-profit software? Even if they can, there are other tools and libraries that are released in a manner that prevents them from being used in commercial software."
116774,"Joel Spolsky","@Ramhound There are some tools that can be used in an academic setting, but not a commercial setting, for example. An example of an Eclipse plugin that's free for non-commercial use but requires permission for use in a commercial setting is [ISO Builder](http://marketplace.eclipse.org/content/iso-builder)"
116775,"Joel Spolsky","@Jeremy And it's probably cheaper than consulting a lawyer, too. Worst case scenerio is that they say their whatever can't be used for donationware. Best case is that they say it can. If it can't under its current distribution guidelines, they might even decide that your project is worthy and release it to you under different terms. Who knows."
116780,"Joel Spolsky","@KenAnderson I just updated my question with some links. Unfortunately, there's no one-size-fits-all answer. It's often up to the project team to decide how to best solve the problem."
116780,"Joel Spolsky","@EricWilson I've never read Clean Code, but I've heard other people recommend it. I'll add it as well."
116911,"Joel Spolsky","Which sections, exactly, do you not think could be used in an agile methodology? I've read the book and am flipping through it now, and I'm remembering and seeing mostly general tips that would make any project, plan-driven or agile, successful."
116911,"Joel Spolsky","@Yannis Not an exact duplicate. That question is asking about the relevance of the tips to a project. This is about applying the book to an agile methodology."
116911,"Joel Spolsky","@lindelof I'm working on an answer now. If there are any specific tips or passages that you have questions about, update the question and throw a comment on my answer once it's posted."
116878,"Joel Spolsky","@Caleb I will add that note, but The Design of Design is a collection of essays. I didn't see a publication date (or any indication of the date that they were first written) for the essays that I'm explicitly referring to."
116915,"Joel Spolsky","@lindeloff I don't know what books you've read, but in agile, you need to perform requirements engineering, design/architecture, implementation, and testing in every iteration. It's just that they might happen concurrently, in different orders, or be done by different groups of people."
116915,"Joel Spolsky","@lindelof They can be, if that's what your process calls for. Those stages happen, certain things need to be done, and the formality and ceremony involved depends on your process. Some environments require more formality, while others don't need it."
117463,"Joel Spolsky","@maple_shaft Nothing 25 years old. I think the oldest code I've ever seen was around 10-15 years old. It's not pleasant, but the user doesn't care about clean code. They care about using software that does what they need it to do in a way that helps their business."
117463,"Joel Spolsky","@James Not really. If it's a software enhancement or defect that requires some changes to the existing system, that's tracked in a defect tracker, where it gets prioritized and assigned. If it's a process, methodology, or notice for a future project, that either gets captured through a feasibility project that prototypes the solution or an engineering memo."
117469,"Joel Spolsky","Do you have any data to back this up? Any process, when initially introduced, will subtract from "productive work time"""
117463,"Joel Spolsky","@Aaronaught And if it costs more to produce than it saves? Mission failed. You can't reduce cost to the point where it compromises quality (as specified in the requirements), but you do need to reduce costs as much as possible. My job is to support the business by fulfilling the functional and nonfunctional requirements in the best, fastest, and cheapest possible manner. Cost is a function of time, scope, and quality that must be minimized."
117463,"Joel Spolsky","@Aaronaught No one said anything about cutting corners. When the software department is a [cost center](http://en.wikipedia.org/wiki/Cost_center_(business))), minimizing cost is of a greater concern. If you're selling the software or SaaS, you have a target price point and can adjust that to achieve goals, within market tolerances. However, if you aren't selling the software/services and go over budget, that's just money lost with no way to recoup from within the software department. Although you still need to balance risk/reward, it's more important to trim the fat from the budget."
75415,"Joel Spolsky","I could be mistaken, but PS doesn't have "many Linux commands implemented"". Instead"
118333,"Joel Spolsky","@maple_shaft I disagree. The way you staff, fund, manage, and measure software projects is very different than running other types of engineering projects. This question is, IMO, on topic here under the "development methodologies"""
118341,"Joel Spolsky","The problem with using percentages or ratios is that it's dependent on knowing all the requirements up front to be able to make meaningful decisions based on the numbers. If you have requirements that are stable, that's fine. In most cases, the requirements have some volitality. Seeing data that fluctuates based on known requirements is meaningless - 50% done today could be 10% done tomorrow and 75% done the next day as requirements are changed."
118769,"Joel Spolsky","Doesn't the hardware/operating system determine the difference between a single click and a double click? So as long as you send two clicks within the threshold for what is considered a double click, it doesn't matter. You just need to simulate "a user sent a double click"""
118819,"Joel Spolsky","@Pankaj Yes, it does."
118972,"Joel Spolsky","This isn't true - cloud computing has nothing to do with who owns the hardware. Putting something "on the cloud"" means that you are making it a network-accessible resource. You could be providing the hardware and infrastructure"
118972,"Joel Spolsky","@Oded It doesn't matter. It's not essential that one rents space from a provider to be enabling cloud computing. Yes, there exist a number of providers, but it is entirely possible for a company to establish private clouds, or public clouds using their own resources."
118983,"Joel Spolsky",""Billed like a utility"" and ""require no capital expenditure or up-front payment"" only apply to services that you are purchasing from a provider"
118981,"Joel Spolsky","@Bob Typically, location, but that isn't a requirement for cloud computing. You might have several distributed server farms. Or you might have individual devices located around a building, city, country, globally, or in some cases extraterrestially. However, you can still create a cloud platform with a single "server room"" by producing systems (applications and services) that are consumed by distribued clients via some network connection. The driving factor is that services and applications (and associated data) are available for consumption/use over a network.""
118981,"Joel Spolsky","@Bob Only the rented cloud computing services lead to reduced responsibility. I was actually part of a team that was working on developing and maintaining a private and secure cloud computing platform for the US Department of Defense and services/applications that run on this cloud. The goal was to not reduce responsibility, but to improve access to data, services, and applications. What was accomplished was breaking down information silos and producing a number of services and applications accessible to any clients with access to the cloud."
118983,"Joel Spolsky","@Caleb That would account for billing like a utility, but not "no capital expenditure or up-front payment"" since the company is incurring the cost"
119237,"Joel Spolsky","It's probably not a text, but an article in a newspaper or magazine, or perhaps the press release announcing it. At least, that's the impression I get from the quote you posted (and I don't have my copy of TMMM handy at the moment)."
119240,"Joel Spolsky","You actually found someplace with the original press release. I was looking, but didn't see anything. +1, even though it's behind a registration wall."
21839,"Joel Spolsky","@greengit In many places, to use the title "engineer"""
21839,"Joel Spolsky","Although that doesn't mean that someone without this formal education can't practice engineering. They just can't call themselves an engineer as a professional title."
21839,"Joel Spolsky","@Renesis By definition, engineering is a craft. Definition of craft: "an art"
21839,"Joel Spolsky","@Renesis I have and always will use the terms as I defined them. Most people I know also make the differentiations and use the same definitions I do. If the asker doesn't, I account for that by providing definitions of how each term is used in my answer, therefore establishing a clear, common definition within a context."
120282,"Joel Spolsky","+1 for the first statement, -1 for the second. Never, under any circumstances, provide an off-the-cuff or on-the-spot estimate. See: The Pragmatic Programmer."
120282,"Joel Spolsky","I believe this is also explicitly mentioned in Steve McConnell's Software Estimation: Demystifying the Black Art and referred to in the works of Watts Humphrey on the Personal Software Process. I don't believe that Hunt, Thomas, McConnell, and Humphrey would be wrong on this - they are among the experts on software development processes and best practices."
120282,"Joel Spolsky","I never mention any time, at all, until I've had a chance to think about it. I say "give me the requirements and/or defect reports"
120282,"Joel Spolsky","Of course, for smaller changes ("change this text"" or ""swap the position of those two buttons"")"
716,"Joel Spolsky","@MadKeithV I have never been in that situation, and I've sat in and been involved with multiple project proposals for multi-million dollar contracts on both sides of the fence. In fact, in my experiences, after an RFP is published, the bidders have ample time to review the documents, ask questions, and produce estimates for cost and time."
716,"Joel Spolsky","@MadKeithV That concept is foreign to me. Perhaps it's just not how it works in the defense industry, or at least on the types of projects that I've worked on. There's just an RFP, some back-and-forth, and then bids. The customer creates some type of conops document or system requirements and draws up an RFP. Then, bidders review these documents, ask questions, and eventually submit a bid. I've never seen pre-RFP discussions, although I have seen RFPs that just go nowhere because of what the bids look like."
120301,"Joel Spolsky","I fully endorse process tailoring and I can't think of why anyone would argue against it, but there is something to be aware of. Scrum purists (including at least one of the creators, although I don't remember which one) will argue that once you drop things mandated by Scrum, it's no longer Scrum and shouldn't be called Scrum. Tailoring is fine, as long as you call your process what it is. It kind of nitpicky, but something to be aware of, especially if you are looking to hire people who have experience with Scrum - some might call you out on it."
120353,"Joel Spolsky","Yeah. I got the notification that there was another answer posted as I was getting the links to the AUP and OUP. I figured since I was almost done, I was just going to post it anyway."
120355,"Joel Spolsky","@Boris I didn't see your comment. I actually just posted Special Case as an answer."
120344,"Joel Spolsky","Why are you making this case to non-software managers? You should be making this case to software/technical managers who should be reading (or have read) Martin's Clean Code and McConnell's Code Complete, analyzing what they read/learn, and then they should be making the case to the business/non-technical managers. Business managers, generally, don't care what the code looks like - they speak in terms of earned value, cost, time, and system quality. The software managers should be taking technical concepts and translating it into these terms, if they can't independently motivate the teams."
120344,"Joel Spolsky","@Aerik That changes everything. You shouldn't be approaching the managers about this (at least, not at first), but going through the software technical managers to the people who aren't software engineers who are writing the code. You aren't trying to sell this to management, but developers. You might just need to sell it to management to get developers to listen. I'll work on an answre later."
120430,"Joel Spolsky","I disagree with the line number continuning across files. To me, that's just confusing and awkward. If there are any issues found, they need to be tracked by module (class, file, maybe even method) anyway. In addition, during a code review, you shouldn't be reviewing an entire system, but rather a subsystem or even a couple of classes or files, so it shouldn't be too hard to track where the changes are."
120430,"Joel Spolsky","If you're organized, it shouldn't matter. To me, I feel that it would slow me down. I've been involved with code reviews and I always print out the files, staple them by class/file, and then read and annotate them. If someone wants to tell me where to look, I want a file name/line number pair - it would make it much easier for me, especially since my IDE prints out the file name in the header/footer on each page and I print the line numbers on a per-file basis."
120874,"Joel Spolsky","@Kilian I thought about that. I'm still learning Scala and haven't actually done anything meaningful with it yet, but I'm not sure how important it is to know Java to be able to use a Java library in Scala. It's not like you drop into Java syntax/style to call a precompiled JAR from Scala."
120977,"Joel Spolsky","@Carson Even though it's practiced, it was never supposed to be. The intention was to be a straw man, identifying the key activities in a software project. I'm not sure where the disconnect happened, between Royce's paper and people practicing a model that was known to be flawed for well-identified reasons."
121086,"Joel Spolsky","No, the PO is not a project manager. There really isn't a single equivalent to PM in Scrum. The PO is responsible for developing and prioritizing requirements. The ScrumMaster is responsible for process and removing roadblocks. The team as a whole handles estimation and scheduling. The duties of a typical PM are split up across multiple people."
121095,"Joel Spolsky","I'm not sold on #2. The process is run by the ScrumMaster, who should always be part of the developing organization. People not following procedures, identifying potential problems, and removing road blocks all fall on the SM. However, if the PO is a customer and the PO is causing difficulties, dealing with it requires more tact than it would if it was a member of the developing organization."
122055,"Joel Spolsky","@Aaron I wouldn't call Don't Make Me Think a classic - it's less than 11 years old. From what I've read, it's also focused on web development, rather than general usability principles. Also, I've never read it. Universal Principles of Design and The Design of Everyday Things were recommended reading for my software usability course, and I own and have read both."
121843,"Joel Spolsky","@kevincline I typically link to Amazon because it will convert the link into a referrer URL for Stack Exchange. If someone clicks and buys from that URL, Stack Exchange can make money. It also becomes trivial, with the title, author, and ISBN information from Amazon, to find the book in your favorite book seller of choice."
122312,"Joel Spolsky","What do you mean by "sprint realisation""? What does that entail?""
122314,"Joel Spolsky","There is no problem with a Product Owner being part of the development team. PO should not be combined with ScrumMaster."
122316,"Joel Spolsky","I would be hesitant to have him drop the Product Owner role, if he was good at it. Changing the point of contact with the users and clients mid-project, if it can be avoided, should be avoided. I'm afraid that it would be more of an adjustment shock to the outside people."
122324,"Joel Spolsky","If he wants to code more, then don't let him accept a PO job on future projects. He accepted the position, and there's simply not enough hours to do everything (at least on this project). Either that, or have someone else take over the PO duties and deal with the changes as to who the clients/customers deal with."
122315,"Joel Spolsky","@xsAce It's not noise. Noise is something that's unwanted. Client/user interaction isn't noise to the PO, but it is noise to the development team."
122286,"Joel Spolsky","Why was this migrated from Stack Overflow? According to the FAQ there, questions about "software tools commonly used by programmers"" are on-topic. I'm pretty sure Visual Studio is a software tool commonly used by programmers.""
122437,"Joel Spolsky","@S.Lott There's a difference between code making sense and having good organizational decisions for the paradigm and language. A project could be well organized and understandable to someone fluent in the language and paradigm, but not to someone new. I've encountered this myself, even in paradigms that I'm familiar with."
122480,"Joel Spolsky","I don't think Java is a pure object-oriented language. Not all language constructs are objects."
122502,"Joel Spolsky","@SteveJackson I agree, however, I've found myself using more Javadocs (even on private members) since IDEs (at least Eclipse and NetBeans) display the Javadoc comments in the code completion tooltips. Of course, they aren't as clean as the public facing interfaces, they provide tips/notes to other developers."
122437,"Joel Spolsky","@S.Lott It would make sense to the person who created it, as well as other people who were fluent in the language and/or paradigm. But it wouldn't make sense to someone who wasn't. I remember the first time I saw a C project of significant size, after developing in Java and C++ for a few years - it was very unnatural and seemingly bad. However, as I became involved in the project, it made sense. If I was to write a new C application prior to seeing that project structure, I would organize it like a C++ application, but I now see that doesn't make much sense. Now, I would do it differently."
122437,"Joel Spolsky","@S.Lott If I didn't have an expert C developer to say "this project is actually an example of a well-structured C program"" and then explain why the project was structured the way it was"
122437,"Joel Spolsky","@S.Lott To summarize, having an expert in the language or paradigm identify a well organized project, identify any weaknesses/shortcomings that might exist in the organization, and explain why is far more valuable than just reading the code and looking at the organization, with the assumption that it's well structured."
122538,"Joel Spolsky","@Sardathrion But they are the ones who know your contract and what you are currently allowed to do under it. If you aren't allowed to do what you want, then you need to take action to change the contract, if you can."
122537,"Joel Spolsky","@MPelletier All of mine allowed me to work on my own projects on my own time. Every last one. The only stipulations that I've ever had to deal with was producing competing products and creating products (even FOSS products) specifically targeting the needs of our customers."
122542,"Joel Spolsky","@P.Brian.Mackey I don't exactly follow. Being able to realize that you are lacking certain skills or knowledge to achieve an objective and then being able to identify how to obtain the skills or knowledge (either for yourself, or by finding someone who already has them and can complete the objective) is a skill that anyone can develop, regardless of personality type. It's also a skill that I would look for in a candidiate. Creativity has nothing to do with knowing the limits of your own knowledge, skills, and abilities."
122541,"Joel Spolsky","This is a terrible idea. Your employer won't just complain, but probably fire you and bring you to court. Once you're through with the legal proceedings, having to explain that you got fired for breaching your employment contract by posting employer-owned code without permission won't go over well in future interviews - I know wouldn't hire you, even if you were the most qualified person."
122541,"Joel Spolsky","Personally, no. However, I've also worked under at-will contracts or in states that require employment to be at-will, meaning you can be fired (or quit) without any reason at all. However, I have studied business management (including courses in business ethics and business law) and this is a possible outcome. In areas where you are not an at-will employee, breach of contract is a common reason for dismissal of an employee."
122538,"Joel Spolsky","@Sardathrion I wouldn't spend the money talking to my lawyer first. I would talk to HR/legal/ethics first and find out if it's against my contract. If it isn't, I don't need a lawyer. If it is and I don't like it, then I talk to my lawyer. Saves a lot of time and money."
122541,"Joel Spolsky","I know about hiring decisions through an extensive study of organizational behavior, human resources management, business ethics, and business law. I also was an interviewer for a replacement."
122989,"Joel Spolsky","@Zack: We do not use .NET programming. I'm looking for general advice that can be used on any project using any technology stack. Things like choosing a model, implementing that model, and so on."
122993,"Joel Spolsky","Yes, I plan to limit the scope of what I do, but I also want to leave them with a roadmap so they won't be left wondering what to do next, especially if things start to go better."
122993,"Joel Spolsky","I think it can be done. This is a team of 5 people, excluding me. Two are full-time developers, one is a part-time developer on this project and part-time on other projects, one is a manager, and one is a marketing type. Both full-time developers are on board for a process and the manager wants to see improvements for the team's performance. It's not like it's being forced against their will."
123332,"Joel Spolsky","To a user, everything is high severity, high priority. It's in their best interests to indicate this. The prioritization should be done by a project or product manager, a Product Owner, a quality lead, or someone else internal to the developing organization. This way, you can avoid the noise of users submitting too many high severity or high priority defects. Plus, developers can filter and only view those that have been accepted by those in a project leadership position."
123332,"Joel Spolsky","I would still prefer the user to identify the type of defect in terms of a functional component (such as "UI"""
123332,"Joel Spolsky","That makes much more sense. The impression I got from reading it was that the user submitted the bug report, and the developer used those priorities (unless directed otherwise). Deadlines, milestones, and sprints do have to be assigned internally. Impacts (severity) can be assigned by the user, since they know how much time they are losing due to the defect, but priorities need to ultimately be confirmed by a product leader or owner."
123353,"Joel Spolsky","@Pomario Why can't you estimate that in terms of story points, hours, or whatever measurement of time you assign to stories? Your engineers should understand the system. Given the defect report and knowledge about the complexity of the subsystems that could be playing a role in the defect, they should be able to estimate a total time it will take to find the location of the defect, write test cases to confirm the defect, fix the defect, and use the test cases to confirm the removal of the defect. If not, perhaps there needs to be time spent on improving your team's ability to estimate."
123375,"Joel Spolsky","I own a copy of Facts and Fallacies, and for each fact (and fallacy), there are citations for various publications that support it. I don't have a copy handy, but do any of those citations discuss the effect of the paradigm on maintenance?"
123353,"Joel Spolsky","Exactly right, @Graham. But even if they don't know exactly what code is involved, they should have enough information to know what modules (at least at the class, if not method level) are most likely involved and have knowledge about the complexity, coupling, cohesion, and overall design of that part of the system to make an educated estimate as to how long the fix will take."
123375,"Joel Spolsky","If any of the studies or publications cited in Facts and Fallacies are about the maintainability of a particular paradigm, one option would be to search the IEEE or ACM databases for other articles and papers that cite that paper. If you don't have access to the IEEE or ACM databases, I can look at my copy of the book when I get home and see if I can do such a search. Unfortunately, I'd only be able to get you names of other papers and not the papers themselves."
123561,"Joel Spolsky","@MarkTrapp There are other ways of discussing code simplicity without topics from empirical software engineering, topics that I'm far less familiar with. For example, discussing simplicity in terms of the ability to write automated tests. My skills and knowledge allow me to answer this question from the perspective of an emprical software engineer, while others can answer from alternative perspectives. Adding that statement to the question limits the number of useful answers significantly, making it (IMO) too localized. If you want to add it, you can, but this is a good question as it is."
123561,"Joel Spolsky","In its present state, there are very few answers to this question (my answer addresses the empirical software engineering standpoint, with the common metrics - there are probably others). It makes no sense to exclude answers providing valid alternatives from other perspectives, which is what the wording of this question does. I disagree fully with these edits and the question should be reverted to its original form."
123561,"Joel Spolsky","@MarkTrapp The problem is unambiguous: How do I determine code simplicity? There are several good answers. Mine is use empirical software engineering techniques to measure complexity. Another might be to write automated tests and if it's difficult to write good tests, the code is complex - a perfectly valid answer. There might be others that I'm not aware of. If you need to measure complexity/simplicity of a code base, the question should be worded in a way to allow all of the alternatives to be presented so the asker can choose the best solution for his particular case."
123574,"Joel Spolsky","I believe #3 is called block depth. It's also related to Cyclomatic Complexity if there are decisional control structures involved."
123573,"Joel Spolsky","@James I explicitly pointed that out. Any measurement or metric needs to be taken in context as an indicator that something should be looked at. It takes the judgement of an engineer to determine if corrective action is needed and what that action is. However, unless you are actively gathering data, there's no empirical way to know about potential problems."
123581,"Joel Spolsky","@Dipan Cyclomatic complexity is related to the readability of the code, through working memory. Code with high cyclomatic complexity (or even just high block depth) is difficult to keep in working memory, therefore more difficult to read straight through."
123581,"Joel Spolsky","@Dipan Less CC doesn't necessarily mean that code is easy to understand, but a greater CC does mean that the code will be more difficult to understand and remember due to [working memory](http://en.wikipedia.org/wiki/Working_memory) and the [7 plus/minus 2](http://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two) concepts. No human can remember what the cases in a 1000 case switch statement are - they'll have trouble remembering more than 5-9 cases. They might have a vague idea of what is being done, but not specifics."
124114,"Joel Spolsky","The entire Pattern-Oriented Software Architecture series is about patterns in different types of systems - Volume 1 is about architectural patterns and patterns that cross-cut domains, Volume 2 is about concurrent systems, Volume 3 is about resource management in networked/distributed systems, Volume 4 is about distributed systems, and Volume 5 is about pattern languages as well as a reference for the other 4 volumes. Given the question, I think that Volume 5 might also be applicable, but I haven't spent too much time with it...yet."
85516,"Joel Spolsky","This was my university's textbook for two quarters of Discrete Mathematics. The only pre-req for those courses was two quarters of calculus (but, IMO, it really wasn't needed for most of the topics)."
124963,"Joel Spolsky","I believe at least the first part of this question is discussed in my [process/product quality book](http://www.amazon.com/Metrics-Models-Software-Quality-Engineering/dp/0201729156/ref=sr_1_1?ie=UTF8&qid=1323822742&sr=8-1), but it's at work since a process engineer is borrowing it."
125116,"Joel Spolsky","@TamásSzelei They do, but I'm not aware of anyone who actually uses that method. I'll add it to my answer for completeness, though."
125116,"Joel Spolsky","@TamásSzelei Then answer the question with your own experiences. Based on my experience with Android and Android developers, the most commonly used method is Eclipse and Google's plugins. There is a lot of support available for these tools, and I would recommend using this stack to any new developer, simply because of those available support and resources. Just because you can do something doesn't mean you should, and my experiences tell me you should strongly consider an IDE for Android development."
124859,"Joel Spolsky","@BryanOakley You do account for time spent in support. If you have 4 developers, you have (4*40 = 160) man/hours per week. Using previous data, you might estimate 60 hours of support. That means you have 100 man/hours of development, or 5/8 of your week. You use this as a ratio to determine your story points. For example, if in one week, you had 8/8 (100%) development time and finished 16 story points, a week with 5/8 development time would only include 10 story points."
125428,"Joel Spolsky","Defensive programming is moe than just if statements. It includes code reviews, static analysis, security audits, secure coding guidelines, and more. In addition, the use of exceptions and exception handling (as opposed to simply letting the program crash and burn) is considered a defensive programming technique."
125428,"Joel Spolsky","I prefer to call those "good ideas when writing code"" myself"
125429,"Joel Spolsky","Agile doesn't mean delivering better software. Quality software can be shipped regardless of the methodology. Agile is typically about delivering high quality value adding software in less time, while responding to a customer's changing needs."
125433,"Joel Spolsky","I don't know if it's always true - it depends on how (at what level) you measure efficiency. If I waterfall through a project that takes me 2 years, I just spent two years developing everything. But if I use an iterative/incremental approach, I might learn that only 40% of my requirements need to be implemented and the project successfully concludes after implementing 40% of the product backlog in 15 months. That's 9 months of development time on a different project. To me, that's an increase in efficiency - I not only met all business needs of one customer, but am already supporting a second."
125433,"Joel Spolsky","As an aside, I totally agree with everything else. I'm just not sure that anyone can say that one methodology is always more/less efficient than another without defining what efficiency is. And even then, there will be variances across projects."
125429,"Joel Spolsky","@Chad Why was it not your place? Who was saying this? If it was an outside vendor, what a good opportunity to understand their project management ability before you work with them."
125400,"Joel Spolsky","@blunders I didn't run the numbers until just now, and I'm still not sure how he's getting those values. However, this isn't the only study that demonstrates that a team size of 5-7 people is optimal for productivity."
125400,"Joel Spolsky","@blunders He only provides a small sample of the study. In order to learn more, you should read Ruby and Howard's publication. If it's a good publication, it will provide the information you are looking for. As far as not looking for studies, I think that's the wrong approach - scientific studies (especially about team size and team dynamics) are exactly what you are looking for."
125907,"Joel Spolsky","I've never seen a job posting that didn't clearly specify the minimum requirements in terms of the type of degree, field of study, experience, and certification, along with any desired degrees, certifications, or skills. I'm not sure what the practices outside the US are, but I would suspect that most job postings would make the minimum and desired qualifications very explicit."
125935,"Joel Spolsky","I'm not too sure about the second paragraph. There are a number of professional associations designed around engineers in computing (computer and software engineers) as well as computing professionals - the IEEE Computer Society, the ACM, and the British Computer Society are rather large. The IEEE Communication Society has begun to reach out to software professionals in other IEEE societies, and searches turn up other local societies in different countries. SE is still less mature than other engineering disciplines, but there are associations formed for software engineers and professionals."
125935,"Joel Spolsky","Is the hiring of programmers to do engineering work common? It's not the case in the defense sector, where having an accredited engineering degree or involvement in an engineering association are respected. I've heard similar things from the healthcare industry as well. Since the advent of software engineering as an undergraduate degree program in the late 1990s, most job postings in the defense sector (outside of advanced research groups) have tended toward explicitly calling out people with experience/education in software engineering (either as their degree or as a minor or concentration)."
125944,"Joel Spolsky","You want a single technology stack to last 10+ years? Why not focus on good architecture and design principles to let your system evolve over time to use the technologies that are appropriate? Take a look at Visual Studio - it's been around since 1995 and has evolved over time. For example, Visual Studio 2010 added a major UI refresh that included the use of WPF and other architectural changes to add extensibility points. You can't control what technologies or paradigms are going to be big next year, much less in the timeframe you are looking at."
125953,"Joel Spolsky","That's true for most of the United States, however the title "software engineer"" is regulated in Texas"
125953,"Joel Spolsky","[This article, written by a PE from the Texas Board of Professional Engineers and published in IEEE Software](http://sce.uhcl.edu/helm/SWEBOK_IEEE/papers/10%20reprint%205.pdf), discusses it in more depth. You can use the title for your full-time employer, using only their facilities to product their products. However, you can't use the title outside the company. It all comes back to the legal responsibilities of someone calling themselves an engineer, which are also discussed in the article."
125953,"Joel Spolsky","@P.Brian.Mackey You can use the title at work only, assuming you are either a PE or meet the exemptions. However, I have personal business cards that identify myself as a "software engineer"" - it's against Texas law for me to use these in Texas to advertise myself"
125935,"Joel Spolsky","@kevincline I never mentioned a test of skill or selectiveness. However, my associations with the IEEE and ACM (including a conference attendance), Order of the Engineer, and IEEE certifications have been mentioned at nearly every interview in the defense industry and never mentioned at interviews in other industries. I've also noticed that companies that actively participate in or sponsor IEEE conferences, standards, and SWEBOK development efforts are companies that come from defense, healthcare, and automotive industries."
125983,"Joel Spolsky","`"Software engineer isn't a real engineer.""` Tell that to the IEEE. Or to ABET"
126000,"Joel Spolsky","I think you are over generalizing. The methodologies used have nothing to do with in-house products versus commercially-sold projects. I've worked on a shipped product that was developed very ad-hoc, ignoring many of what would be considered best practices. I've also worked on in-house projects that had detailed specs, test suites, and a plethora of quality control practices."
126003,"Joel Spolsky","I was writing something similar to this when you posted. +1 just for the last sentence, although it's all valid points."
126112,"Joel Spolsky","Is there a reason why you need to decide on how you are going to present your requirements to the developing organization now, instead of after you have gone through your organization's contracting process and selected a contractor to build the system?"
126114,"Joel Spolsky","@maple_shaft By structuring your Request for Proposal properly, you can give strong hints at what type of development process should be utilized to ensure the visibility and interaction that you need. Something important to keep in mind is that it's not always about what someone wants, but why they want it - there are almost always alternatives to meet the needs of involved parties in a way that works well for everyone (that's a key component of Principled Negotiation)."
126115,"Joel Spolsky","It's always a trade-off. With a firm, you might give up some aspects of control, but they supply the people, facilities, and technical resources. With in-house contractors, you might save some money, but also need to furnish them with all of the resources they need and spend time/money training them to use your systems. It comes down to how well you vet the people in both instances and what you're willing to give or take on. Both can be equally viable options, assuming you do your due diligance in both cases."
126513,"Joel Spolsky","@YannisRizos The customer shouldn't verify it. The developing organization should take the pressure of verifying the claim and presenting alternatives for negotiation."
126933,"Joel Spolsky","I'd also recommend IEEE Software as regular magazine about research topics, geared toward software practitioners. IEEE Computer reaches across computing, including hardware, scientific computing, networking, and so on, while IEEE Software focuses exclusively on software development and topics of interest to software developers across any industry. Both are very good, however, and I subscribe and regularly read both. I then follow up with the cited works contained in articles I'm interested in."
127190,"Joel Spolsky","@kiamlaluno Transcoding a video isn't related to graphics, and audio transcoding most certinly isn't. It's the conversion from one file format to another. An example is MPEG-2 to H.264. It doesn't require the display of graphics to perform."
127522,"Joel Spolsky","`We have a waterfall/iterative SDLC.` Elaborate on this. Waterfall is, by definition, a sequential process, not an iterative one. Although there are modified waterfalls (such as the sashimi model or waterfall-with-sub-projects), they are all sequential. Are you trying to move toward iterative processes from your current sequential process?"
127539,"Joel Spolsky","Can you elaborate on why automated UI testing is essential? Scrum is a project management framework that doesn't dictate any technical practices. The only references to testing that I can find with regards to Scrum that the Scrum Team is a cross-functional team. Although I would prefer automated testing, Scrum doesn't require any automated testing nor any testing at all, although passing tests should be part of the Definition of Done. It just says that any testing that is done is done by the team. Your bottom line is right - the current organizational structure is not well suited to Scrum."
127539,"Joel Spolsky","The question is, copied right from the original post, emphasis added: "How important it is to have automated UI testing **for Scrum**."" For Scrum"
127539,"Joel Spolsky","The wording in your answer makes it sound like automated UI testing is part of the Scrum process, and it isn't. But that doesn't mean it's not a good thing that should be done by the development team to improve quality. I agree it's a poorly worded question, but the distinction should be made between "is this required for Scrum"" and ""should completing automated UI testing be part of my definition of done for a story"". Ultimately"
127539,"Joel Spolsky","`Essential. Completely required.` needs to be changed to reflect that it's not "essential"" or ""completly required"" by the Scrum process framework. Right now"
128143,"Joel Spolsky","@user1016253 That means your estimate had a problem. Estimates should include risk exposure (impact * probability = exposure, where exposure has an impact on cost, time, and quality). Because there was an impediment that happened, but the estimate didn't account for it (or didn't account for enough of it), something was either overlooked or mis-assessed (the impact or probability was too low, meaning the exposure was too low, meaning there wasn't enough resources allocated to identifying and correcting the problem when it happened)."
128143,"Joel Spolsky","@user1016253 And if you are having trouble estimating and seeing risks and potential roadblocks, perhaps a good idea would be to decompose the story, either into multiple stories that each go into the backlog or sub-stories for use only by the development team to understand the work that needs to be done. It's often easier to estimate and perform risk analysis on a smaller unit of work."
128142,"Joel Spolsky","The failure to identify an impediment as a possible risk and determine the risk exposure RE (impact * probability) indicates a problem with estimation. A user story with a high RE needs to have a larger buffer of cost and time associated with it to address those risks, should they develop into problems."
128143,"Joel Spolsky","@DavidThornley It's not a way to manage risk at all, but a starting point for a risk management plan that would also include detection and mitigation strategies. It's a technique used to ensure that you have sufficient money and time in your plan should risks develop into problems. It's advocated by Steve McConnell in Software Estimation and Karl Wiegers in [this paper](http://www.compaid.com/caiinternet/ezine/Wiegers-Rainy.pdf). It's important to realize that it's not a per-task buffer, but a project (or iteration) buffer should various risks materialize."
128143,"Joel Spolsky","@Chris If the risk doesn't materialize, you have extra time. In a sequential process, you progress to the next phase early. In an iterative process, you can take the time to pull the next highest priority story into the backlog, or perform refactoring, or write additional tests, or work on things that exist outside of the project (training, meetings, other projects). There is no inflation of velocity, since the time is filled - Parkinson's Law applies."
128143,"Joel Spolsky","@Chris The buffer would only be a fraction of the risk exposure. I believe 20% is a typical number, so if something happening had a impact of 4 schedule hours and a chance of 50%, the risk exposure would be 2 hours and the buffer would be 20% of 2 hours, which I would round to 0.5 hours. The largest buffer for a 4 hour task would be (with rounding) 1 hour. This is because not all risks will happen and might not be as severe as you expect, so you don't need to buffer everything."
128143,"Joel Spolsky","@Chris As far as velocity, I'd bring in fewer hours of work (or story points, if that's how you calculate). I'd assess my risks in terms of the same units as a story and make sure that actual story points + buffer story points = velocity from the previous iteration. In a low-risk iteration, you bring it a lot more actionable work. In a high risk iteration, you bring in a smaller amount of actionable work, but are able to pull down from the backlog if risks don't materialize. In the end, velocity averages out throughout the project."
128143,"Joel Spolsky","@DavidThornley It depends on how you define "failure"". Perhaps failure is even the wrong word. The ultimate goal is to get your estimate as close as possible to actuality and do that consistently. Every estimate needs a range or confidence interval"
128259,"Joel Spolsky","If you use function points as an input to COCOMO, I believe there is an adjustment factor for different languages to account for time. If you use SLOC, you can only compare COCOMO output against projects in the same language. Unfortunately, I only have Software Engineering Economics, which covers COCOMO 89 and not COCOMO II (the preferred COCOMO implementation these days)."
128281,"Joel Spolsky","Size is one input into COCOMO, so SLOC == effort is wrong. Effort and cost are functions of size (SLOC or function points, preferrably function points), team cohesion, process maturity, required reliability, complexity, the capability and experiences of team members, and more. If all other things are equal, using tools and platforms that the developers are familiar with in order to reduce effort and cost. However, the whole concept of using COCOMO in an academic setting to argue language choice is pointless. The purpose of a class is not to reduce cost/effort, but to learn concepts/techniques."
128281,"Joel Spolsky","The other effects are pretty significant, at least in COCOMO II. According to Steve McConnell's Software Estimation, experience with the given language and toolchain has a 40% impact on productivity and using the weakest tool set and environment can increase effort by 50%. The influence of platform experience is 1.40 and the influence of programmer capability is 1.76, meaning that low experience and low capability means 1.40 and 1.76 times more effort than very high capability. Although size is primary, you definitly can't discount the other factors at all."
128281,"Joel Spolsky","That's a valid point. The reason I picked out those particular factors (of the 20-something, I think, in COCOMO II) is because they are the ones that are most relevant to technology choice without considering the technical feasibility behind technology choice. A full discussion of cost and effort would be several volumes of text and not suitable for an answer, much less a comment (Software Engineering Economics is almost 800 pages, Software Estimation is nearly 300, and those don't even cover everything together)."
128432,"Joel Spolsky","This can fail when you have someone who doesn't bring up problems. I wouldn't call that a very common issue on teams that I've worked on, but I have seen it myself. So in addition to having the meeting, you need to work with people to make sure everyone's bringing up problems, concerns, and other issues in front of the team. Part of it is team culture and meeting structure, the other is individual behavior."
128551,"Joel Spolsky","@JeffO That's probably true, but from what I've seen, many managers and leaders don't have time to develop software at work, with their other responsibilities. Some still work on personal projects at home, though. It depends a lot on your organization and duties."
128644,"Joel Spolsky","This might be true of how your organization implemented TSP, but it is by no means an accurate description of what PSP/TSP actually means."
128644,"Joel Spolsky","Phrases like `TSP is waterfall process incognito... period.` and `There is a series of ceremonial meetings where requirements are drawn in blood and work is planned out.` and `These people were basically operating in the stone age and had no concept of test driven development.` and `As for developer collaboration... virtually non existent.` do not capture the essence of PSP/TSP. This "answer"" is incredibly biased. Sure"
129215,"Joel Spolsky","I voted to close as too localized because it's only relevant to a small geographic area (Wolfram Alpha suggests Quebec is only 15% of the geographic area of Canada, and less than 1% of the world by my math), but it could also be off-topic since it applies to all careers within this limited geographic area and not exclusive to software developers."
129286,"Joel Spolsky","Where is waterfall with iterations defined? I'm familiar with the variants of waterfall that McConnell discusses in Rapid Development - Sashimi (Waterfall with Overlapping Phases), Waterfall with Subprojects, and Waterfall with Risk Reduction. I've never heard of waterfall with iterations before. To me, they sounds like the same thing, but without context, I can't be sure."
127809,"Joel Spolsky","For something like this, I'd consult a lawyer. My career is in the defense industry, including at contractors who create products for domestic as well as foreign customers. There is not only a legal team, but specific export control specialists that review everything to make sure it's following the guidelines. There are a lot of little things to watch out for and relying on an answer from a software developer isn't wise since it's so easy to overlook something important."
129357,"Joel Spolsky","The typical waterfall model presented is actually a strawman and not intended as an actual methodology. If you [read Winston Royce's paper](http://www.cs.umd.edu/class/spring2003/cmsc838p/Process/waterfall.pdf), you'll see that not only did Royce call this model a poor decision to manage a project, but presented a effective waterfall for software development is extremely different than what most people are taught."
129345,"Joel Spolsky","I may have just died a little inside."
18669,"Joel Spolsky","Waterfall is not a philosophy. It's a model. It's part of the plan-driven philosophy, along with other models such as the Spiral model."
129521,"Joel Spolsky","Technically, the developer can perform a review on his/her own work. It's not a requirement that another individual perform the review."
129545,"Joel Spolsky","It depends on what you mean by logic mistakes. Some tools can detect problems such as `=` versus `==`, loops that will never end or code blocks that will never execute."
129545,"Joel Spolsky","`=`/`==` might not be a logic error, but the other two are often the result of logic errors. Although the extent to which they are detected depends on the tool and the certainty of which the results will always be the same."
129604,"Joel Spolsky","What position is this for? What type of job is this? What domain is it in?"
129604,"Joel Spolsky","I see your edits, but still - what type of job is this? Is this an internship? An entry level job? An intermediate job? Are you looking to hire a programmer or an engineer or a scientist? What domain is this in? Would they ever be in a position such that they would need to roll their own algorithms or data structures for any reason?"
109909,"Joel Spolsky","Can you tell us more about the application? Is it a desktop application or a web application? Peer-to-peer, client-server, or some other architecture?"
129796,"Joel Spolsky","@maple_shaft It is possible to use code reviews for defect prevention. Combined with defect removal effectiveness data, you can accurately judge the effectiveness of a code review. Applying root cause analysis/Five Whys can then improve the effectiveness of reviews."
129801,"Joel Spolsky","The question that you pose probably isn't quite right. According to the [project management triangle](http://en.wikipedia.org/wiki/Project_triangle#Project_Management_Triangle), only two of the sides (cost, time, scope) can be set. The third side is dependent on the other two. Clients want all three - low cost, fast delivery, all requested features. But that's not possible."
129807,"Joel Spolsky","Although not a "bug"""
129807,"Joel Spolsky","@Dunk The cost of a code review depends on the type of code review. A formal inspection with 3-5 readers, a moderator, and the presence of the author (5-7 people in a room) is expensive. A desk check that consists of another developer glancing over the code for 10-15 minutes is also a code review, but much less formal and much cheaper. Even pair programming can be considered a "code review"" technique of sorts. The appropriate technique is determined by factors including (but not limited to) the criticality of the code"
130119,"Joel Spolsky","@Raynos There's no reason why Agile methods can not be used in mission critical code. However, when you start having dependencies on hardware for final system and integration tests, it becomes a bottleneck that prevents or limits what can be done on an iteration. However, when working in a purely software environment (including software simulations of hardware/systems), Agile can be applied."
130119,"Joel Spolsky","@Raynos I've worked in the defense industry, including on a Scrum team for the US Air Force. It gets pretty strict with procedures, but we didn't encounter any bottlenecks or issues until we had to move from building software (both production and system simulation tools) to integrating with a system that contained hardware components, at which point we had to adjust the methodology."
130302,"Joel Spolsky","Why aren't the terms "red flag"" or ""warning sign"" sufficient?""
130303,"Joel Spolsky","I'd shy away from using the term "code smell"" in a formal document"
44768,"Joel Spolsky","`In the industrial world, very few companies have any sort of metric measurement program at all.` Any company with a CMMI rating of 2 or higher will have a measurements/metrics analysis program in place. The gathering of measurements and metrics is a Maturity Level 2 requirement. CMMI Maturity Level 4 requires quantitative project management, based on those measurements and metrics, along with things like root cause analysis to act on identified problems. There are a large number of organizations rated at CMMI Level 4 (or 5)."
130432,"Joel Spolsky","@BruceEdiger Read [The Dark Side of Software Engineering](http://www.amazon.com/Dark-Side-Software-Engineering-Computing/dp/0470597178). Case study after case study and court case after court case of hacking (unauthorized access by employees as well as outside entities), information theft, espionage, and disgruntled employees making private information public. It happens and it matters - it costs a great deal of money, time, resources, and the public's trust in a company."
130689,"Joel Spolsky","@pdr I don't see why not. But it depends on your implementation. If your customer object tracks customer-dependent discounts, then there might be an operation to return the discounts the customer is eligible for. As the customer buys things, the attributes change and this method implementation changes via the state pattern."
130692,"Joel Spolsky","Chain of Responsibility is another good one. Might even be coupled with a strategy. In a case where only one discount can be applied, each strategy is chained with another. Each chain computes its discount (if the customer is eligible), compares it to the previous discount, and passes the customer, order, and discount data to the next chain. +1."
130663,"Joel Spolsky","@TomSquires The 20% figure sounds right for the act of writing code. Architecture, design, and planning isn't writing code. I come up with about the same figure (15-20%) looking back on past projects, assuming that code includes production code, test code, and build/deploy scripts. The other 80% of the time is requirements, architecture, design, documentation, planning and coordination, domain research..."
130689,"Joel Spolsky","@jfrankcarr In my mind, it wouldn't. I'd populate the values for sets of items that lead to a discount, the percentages off, and so forth from some kind of configuration. Sort of dynamically building my state machine transitions and attributes of my decorators and strategies."
130872,"Joel Spolsky","`To be a good manager you need to EARN the respect of the people who will be doing the work.` From an organizational behavior perspective, not necessarily. There are 6 bases of power - positional, referent, expert, reward, coercive, and informational. What you refer to is referent power - having the respect and loyalty of those you lead. However, if you have knowledge and skills (expert), the ability to utilize the information and resources at your disposal (informational), and a position/title of authority (positional), it's very possible to be gain the referent power quickly."
130645,"Joel Spolsky","Voting to close (again). This problem is not unique to software development. Replace "junior developer"" with ""junior accountant"""
130645,"Joel Spolsky","@RobZ My chef and carpenter examples still apply (and that's 2 out of the 3, and even in accounting, it's not cut and dry in all cases, although it often is). There are many ways to make a cake and different techniques for building something. The core problem is "what techniques can I use to help someone with less experience do something a way that I know is better"
130645,"Joel Spolsky","@BinaryWarrior It doesn't matter. This is not, in its present state, a question about how to explain to them to be a better software developer. It's about how to explain to a less experienced person that their methodology or solution is not optimal. It doesn't matter if it's their method or solution of building a stair, baking a cake, or writing an algorithm. The same management, leadership, and psychological tactics still apply equally across all."
110225,"Joel Spolsky","@jimasp Reading books is not enough. Unless you actually practice and do, it doesn't matter how many books you read."
131036,"Joel Spolsky","@Oded Considering that [Eric Lippert has an account and participates on Programmers](http://programmers.stackexchange.com/users/6505/eric-lippert), I think he just did."
131036,"Joel Spolsky","@Oded I've seen him post a few times. He's not very active (less than 100 answers), but he appears to visit somewhat regularly and I would suspect that he might come across a question like this one."
131036,"Joel Spolsky","@BenVoigt It doesn't necessarily require a single individual's knowledge, although there is a single person here who can (easily, I'd assume) give the single right answer. Anyone familiar with the specification can probably answer the question, especially if they have a knowledge of programming language design. It's also an interesting language design/language implementation question, which is on-topic here."
131080,"Joel Spolsky","The Cone of Uncertainty applies to estimates. Even if you know exactly what you are going to build, it still holds (although is narrower) because you don't necessarily know how you are going to build it (a single problem has a near infinite number of designs with varying complexity) and what resources you have to build it (staffing, computational resources, and available funds all affect project duration/cost). Using the Cone of Uncertainty to decide how much to design is flawed, since the act of building architectural and design models and prototypes is what narrows the cone."
131209,"Joel Spolsky","@DeadMG The intent was more to demonstrate a methodology for determining productivity and defect tracking in a way that can be used to compare languages. It's a prototype of a methodology. Unfortunately, I couldn't find anyone who expanded upon this methodology in a statistically relevant study."
131366,"Joel Spolsky","I don't understand your last paragraph: "Generally Apps Hungarian provides the reader with a greater context of the use of the variable based on the name alone than Apps Hungarian"". I'm assuming the first is supposed to be Apps Hungarian and the second is supposed to be System notation.""
131366,"Joel Spolsky","No problem. I was going to edit it, since I was pretty sure I knew what you were trying to say, but I wanted to be 100% sure that my assumption was right rather than have a wrong answer."
131411,"Joel Spolsky","I can't find anything that suggests Java is released under the GPL. It appears the binaries are released under the [BCL](http://www.oracle.com/technetwork/java/javase/terms/license/index.html) while the source is released under the [Java Research License](http://www.java.net/jrl.csp)."
131411,"Joel Spolsky","So is your statement that `GNU license is only for source code of the language itself` correct? I can not find anything to support that."
131411,"Joel Spolsky","Your post says that Java is released under the GPL. I can not find anything to support this claim. In fact, everything that I can find suggests that nothing from Oracle is released under the GPL. Please provide a link to an Oracle page that says Java is released under the GPL or rephase your answer."
131470,"Joel Spolsky","`The screen size and touchscreen make traditional webpages much more difficult to use. By creating an app for phones a better experience can be delivered to the user.` What about the trade-offs and benefits between a mobile-device-optimized website versus a mobile app? I agree with your assessment of website versus mobile app, but what's your take on mobile-optimized websites designed for Android, iPhone, and other devices?"
131470,"Joel Spolsky","@jfrankcarr Another valid point. Although I would suspect a tablet is more like a phone than a computer, being touch-based instead of keyboard/mouse-based. There are differences with the larger screen, though."
131468,"Joel Spolsky","@casperOne The answers to your questions have been edited in. If you have any further questions or want further clarification, let me know. Thanks!"
131540,"Joel Spolsky","[This blog post](http://www.scrumalliance.org/articles/88) might be relevant, but what exactly are your superiors asking for? They want you to prove that every staff member will be working on a project (and not on overhead time/money) for at least 60% of their time every week?"
131468,"Joel Spolsky","@YannisRizos I added your question to the post. If you would like any more clarification or have more questions, let me know."
131468,"Joel Spolsky","@YannisRizos My immediate plans for Programmers are to first become more involved with tag cleanup. Tag wiki cleanups will be more passive, but perhaps I can either find or create good examples of what a tag wiki should be. And I do wish you the best of luck in this race for the moderatorship - I think you'd do a fine job."
131549,"Joel Spolsky","I agree with your points, but at some level, it is his problem. He's proposing a process improvement effort, and the business management side of the organization wants to ensure that time spent on (at least what we call where I work) overhead (any work not directly supporting a program or technical project) is minimized. I think they might be asking the wrong questions, but it is a valid concern (from their perspective) to maximize the time spent on billable or non-overhead hours."
131468,"Joel Spolsky","Thanks, @maple_shaft. I do often take an unpopular stance on things, but in the end, I'm happy to support what the greater community thinks should be. As a moderator, I'd continue to voice my opinions on Meta, even taking a side that people may disagree with. But when I'm performing moderator duties, I'd go with the current community-held standards, even if I don't necessarily agree with them."
131586,"Joel Spolsky","@S.Lott That's a good point. The most influencial work that I'm familiar with in software engineering economics is [Barry Boehm's Software Engineering Economics](http://www.amazon.com/Software-Engineering-Economics-Barry-Boehm/dp/0138221227). However, it focuses on making program-level and project-level engineering decisions based on risk, cost, and value rather than on chosing a lifecycle methodology."
131586,"Joel Spolsky","@ANCB It's relatively easy to perform studies in software engineering, in some areas. There's an entire area of study devoted to empirical software engineering. However, once you enter the realm of project management, you have to contend with people, and it becomes much harder to develop rules and absolute facts."
131633,"Joel Spolsky","This question has been [cross-posted to PM.SE](http://pm.stackexchange.com/questions/4422/cmmi-and-scrum-related-jobs), where it currently has 4 answers. I do feel it's appropriate for this site, though, given that it's more about software engineering process than (software) project management. I'd also like to point out an older [question here about software engineering process jobs/careers](http://programmers.stackexchange.com/questions/94060/what-is-the-best-way-to-study-and-become-involved-in-software-engineering-proces)."
131468,"Joel Spolsky","@MarvinPinto The answer to your question has been added. If you want further clarification, let me know. But Yannis in his last comment is dead on the money: to me, it's not the actual scope that's the problem, but some wording in the FAQ."
131468,"Joel Spolsky","@MarvinPinto No. The FAQ does a decent job of outlining the appropriate scope. However, some of the terminology used is vague. For example, "software engineering"" is a bullet point. I'm holding a copy of the Software Engineering Body of Knowledge right now"
131953,"Joel Spolsky","Where did you read that "XP specifies software practices and requires you to follow"
131953,"Joel Spolsky","@Amumu I don't see where it says to not use UML. In fact, quoting that link: `You may well need some nicely formatted UML for your project...If and when you really need these things, then by all means you should do them. But inside your collocated Whole Team, you most probably will not need them, because the information you need will be communicated through the more effective medium of conversation.`"
131957,"Joel Spolsky","@Amumu I don't see anything, in either article, encouraging an absence of documentation. I'm seeing the idea that less concrete and more fluid, more just-in-time, and more value-adding documentation is better. It's still documentation, it's just captured differently. If you can say that UML adds value to your project, then you should do it. However, the argument is that on many projects, it doesn't add value, therefore it isn't necessary and shouldn't be done."
131957,"Joel Spolsky","@Amumu I just added more information to my answer, quoting areas in both articles that show that XP does not discourage modeling, but discourages modeling **that doesn't add value**."
131957,"Joel Spolsky","@YannisRizos You should add an answer as your own take on this. I'm coming from a background where things like Lean, Six Sigma, CMMI, and Earned Value Management prevail, so I tend to focus on cost versus value, least waste, and so on. More answers never hurt anyone, especially from a different perspective."
131957,"Joel Spolsky","@Amumu No agile methods discourage planning. Instead, they distribute the planning, architecture, and design throughout the project and enable you to plan a small portion (a single iteration) at a given moment in time. So rather than taking a baselined requirements specification, creating an architecture, and modeling it, you realize that requirements are going to change and you only design and model a subset of the functionality of the whole system at any given moment in time. (to be continued)"
131957,"Joel Spolsky","@Amumu Each iteration is, in and of itself, a complete project that undergoes project planning, requirements engineering, system architecture, detailed design, implementation, testing, and release. Over the life of a complete system development project, you will have many, many short (2-4 week, usually) projects. At any given moment in time, you realize that you have a limited understanding of the system, and you only model what you know. Then, as you progress through your iterations, you continually revise your models and your implementation. (to be continued)"
131957,"Joel Spolsky","@Amumu So if you realize that you don't know everything about the system, you realize that modeling the unknown is a waste of time. From a PMs perspective, time is money, and therefore is a waste of money since, in the future, the models become useless and need to be revised anyway. Rework is more expensive than work."
132229,"Joel Spolsky","I never even thought about BDfLs when I was writing my answer. I can see a lot of parallels between a Scrum product owner and a BDfL. +1"
132230,"Joel Spolsky","@blunders I'm not sure if there will be. But I would suspect if anyone wrote about anything similar, he probably would have. If I get some time and motivation, I'll look too."
132263,"Joel Spolsky","Are you trying to perform manual or automated testing, or doesn't it matter? Are you testing your application or trying to create tests for the gem?"
132403,"Joel Spolsky","To add to @MikeBaranczak - there are several examples of good use of `friend` in C++. For example, the Iterator design pattern can use `friend` to access private members so that the aggregate (the thing being iterated over) doesn't have to expose methods for the sole purpose of iteration. It lets you keep iteration methods in the iterator and data structure maintenance methods in the data structure. Using `friend` to accomplish similar goals is probably a good use of the language constructs of C++."
132373,"Joel Spolsky","Voting to reopen - one question is explicitly about talking to a boss/superior about their code, while this one is about organizational problems and concerns. Although there might be similarities, they are two distinct problems. I feel that there might be a duplicate out there, but I didn't see it in my quick search, and I know the question that this is currently marked as a duplicate of is not it."
132429,"Joel Spolsky","You mention technological reasons, but what about business decisions? Those typically constrain your technical decisions. What technologies does your software team know? What hardware systems do you have available? What technologies can your system administrators support? These need to be considered just as much as the technical reasons, and will probably be considered more by the people with the money."
132491,"Joel Spolsky","Have you established a formal contract with the customer yet?"
132779,"Joel Spolsky","You might be interested in a number of questions here about [estimating story points](http://programmers.stackexchange.com/questions/69423/whats-the-best-way-to-estimate-story-points-in-scrum), [agile estimation](http://programmers.stackexchange.com/questions/63429/real-world-agile-practices-and-estimates), [a definition of story points](http://programmers.stackexchange.com/questions/36810/whats-the-best-explanation-of-what-story-points-are), and [measuring progress in agile](http://programmers.stackexchange.com/questions/123920/measuring-the-state-of-progress-in-an-agile-project)."
132996,"Joel Spolsky","@RobertHarvey I believe Java 7 introduced some new language concepts, so it might fail at converting source files into machine code. If the bytecode has also changed with these new features, then that would fail as well"
133276,"Joel Spolsky","I'm not sure what you mean by "never been implemented"". There are technologies that implement each of the 7 layers as defined in the [OSI model](http://en.wikipedia.org/wiki/OSI_Model). The [TCP/IP model](http://en.wikipedia.org/wiki/TCP/IP_model) is just another way of looking at networking. Both define networking"
133359,"Joel Spolsky","Can you provide proof of this being anything close to a standard? The most common name I've seen is users_widgets, but I've seen many variations, including users_widgets_assn."
133359,"Joel Spolsky","@Morons Then why are you referring to it as "close to a standard""? There is no standard"
133502,"Joel Spolsky","Is the 20% mandatory? Google is famous for their 80/20 rule, but it's not mandatory there. If you don't have an idea at the time, you could work on your assigned projects 100% of the time, spend your 20% time supporting another team's assigned projects, or even spend less than 20% of your time on these things (20% is a general cap, not a hard number)."
133640,"Joel Spolsky","@Pomario I'm assuming 2 week, 40 hour/week, 8 hour day sprints. Assuming one person took one day off, the capacity should be 0.99 for the first formula or 72 for the second. This gives you a computed velocity of either 16.66 or 0.24. Your capacity for the next sprint would be either 0.5 or 40. Plug the previous velocity and expected load into the equations. This means that you should bring in between 8 and 10 story points, since you multiple the completed velocity by your expected load. I'd err closer to 8 or 9. (Someone might also want to double check my math - I'm a bit sick today.)"
133768,"Joel Spolsky","I favorited this. I'm a bit under the weather, but I do want to answer it..."
133822,"Joel Spolsky","I'm a bit under the weather, so if I missed anything or something doesn't make sense, poke me and I'll fix it. Thanks guys."
134182,"Joel Spolsky","@RobZ By definition, you can't push for grassroots efforts - it has to naturally come from the bottom up. Unless the project teams realize that there's a real problem, the tendency is to not change and to oppose changes that are perceived as bad in some way (such as making work more complicated or difficult, which is often associated with process improvement, although it isn't often the case)."
134182,"Joel Spolsky","@RobZ And when management steps in and dictates actions, developers resist. You can't mandate cultural change and expect it to happen simply and quietly. It's a long, painful process."
134182,"Joel Spolsky","@RobZ And I presented you with two methods of minimizing resistance that have been known to work very well. However, unless you have substantial buy-in and drive from the developers, management-directed process improvement efforts tend to decrease moral and productivity and increase turnover."
134231,"Joel Spolsky","@Aki This question was moved to this site from Stack Overflow, where it didn't belong."
76619,"Joel Spolsky","Can you elaborate on how this helps the asker? Does it meet all of the mandatory requirements? What advantages does it provide over the other options? Are there any downsides?"
134276,"Joel Spolsky","@MarcosRoriz No, not at all. They are both related to managing software projects, but they are at different levels of granularity."
134276,"Joel Spolsky","@MarcosRoriz I'm really not sure how to be more specific. A model is more abstract than a methodology. A model defines activities, but says nothing about how they are performed. A methodology defines how you carry out those activities (to varying degrees - some are more specific than others)."
134598,"Joel Spolsky","Your expanded answer is much better. The original version wasn't helpful without something to back it up, either research, experiences, or other facts. You added that, so it should be good."
134595,"Joel Spolsky","@Nupul I'm using the [COCOMO estimation tool provided at their website](http://diana.nps.edu/~madachy/tools/COCOMOII.php). For a 50000 SLOC project with no reuse or no modified code, and all of the cost drivers set to Nominal, effort is about 217 person months. If I change "Language and Toolset Experience"" to ""Very High"" (your Java example)"
134595,"Joel Spolsky","@Nupul From a purely SLOC-approach, you would suspect that they are very similar. Just like I said in my first paragraph, both are third-generation-languages, so the SLOC count will be on the same order of magnitude. However, when you start adjusting other parameters, such as experience with the language, or the experience on the target platform, you start getting variations. Now, the variations by only changing language are less than 100 person-hours: negligible in the grand scheme of things."
133640,"Joel Spolsky","I just realized I made a mistake - the first capacity would be 0.90, not 0.99, as 8 hours is 10% of an 80 hour work week. That means the computed velocity for the first sprint would 15.3. However, the analysis of the data doesn't change."
134828,"Joel Spolsky","Is your problem to profile code or to build a StopWatch? Because if you are trying to profile your code, it would be better to use tools suitable to such a task and not introduce more code that's unrelated to the business logic being performed."
135224,"Joel Spolsky","@EmmadKareem What more are you looking for? The question defines "architectural patterns"" as the patterns defined in Fowler's PoEAA book. The input to static analysis is some kind of work product"
135380,"Joel Spolsky","To those flagging: I have yet to see a reason to close this. I searched under both the document title and document ID and there is no apparent way to purchase or download this document. There is no reference to it being superceded by another document. There is nothing, aside from it's name being referenced in other documents. Someone familiar with this specification should be able to point toward where to obtain this publication or other, similar, useful documents that cover the same topics."
135380,"Joel Spolsky","@RobertHarvey I would expect some additional text that identifies the publisher of the document, date of publication, if there is ongoing work to revise the document, and so on."
136002,"Joel Spolsky","@ErikDietrich You might be able to, but I probably wouldn't quantify that value. Perhaps an "executive summary"" style report on what your metric tools tell you"
136002,"Joel Spolsky","@Mar That assumes that you properly use these and aren't gaming them for your advantage. Want some extra time to clean up the code base, just add these comments where they aren't appropriate. Don't care about the codebase, just remove them from where they should be. Comments can lie, code can't."
136002,"Joel Spolsky","@MaR I don't see how you can cheat any of the metrics I provided. Perhaps code coverage can be gamed, but any good process should include reviews of the tests to ensure they are useful and valid. Perhaps code can be duplicated by removing method calls and copy/pasting the block of code. But you can't game coupling, cohesion, Halstead complexity measures, or cyclomatic complexity."
137157,"Joel Spolsky","`A sprint is NOT over until every assigned user story in the sprint has been pushed out of scope for that sprint, or accepted.` In Scrum, a sprint (like most things) is timeboxed. At the end of the specified time (usually 2-4 weeks), a story must be done (integrated and accepted) or not done (not integrated and not accepted). If it's not done, it returns to the backlog for reprioritization, and the feature is not released (a user has no access to that functionality). I suppose, at the end of the sprint, all not-done stories are pushed out-of-scope, but that seems a weird way to think about it."
137662,"Joel Spolsky","There are plenty of resources about the GPLv2 on the Internet. Perhaps it would be better if you described the conditions under which you want to release your project and ask specific questions about the GPL (and/or other licenses) and how it impacts your application."
137662,"Joel Spolsky","Can you edit that into your question, with definitions about what you mean by "have a lot of control over it""?""
138374,"Joel Spolsky","`Putting yourself in a position of needing to prove your productivity usually results in getting fired.` Accurate time tracking, regular status reports (including daily stand-ups), metrics about status of feature implementation and defect closure, and so on are all about demonstrating productivity. All are commonplace for every engineer every place I've ever worked, yet no one routinely gets fired."
138369,"Joel Spolsky","@JarrodRoberson I've never had a problem ever going to a superior with information that they were wrong. Perhaps its corporate culture where I've worked. It's all about presentation - dealing with [Difficult Conversations](http://www.amazon.com/Difficult-Conversations-Discuss-What-Matters/dp/0143118447/ref=dp_ob_title_bk) or using Principled Negotiation techniques tends to work wonders."
138369,"Joel Spolsky","@bizso09 Not trusting the education and experiences of your team, especially with regards to your current conditions, is a fatal mistake on any project. I agree with another of other commenters on various posts - it sounds like you are the problem, not your team nor the policies of your university. If this is how you expect the workplace to be, I don't think you'd last very long at many companies."
138973,"Joel Spolsky","Any project launch is usually chaotic to some extent, depending on the team. Not only are there usually technical issues with getting everything set up, but also personal issues between members of the team and process issues figuring out how to best deal with problems that arise."
139013,"Joel Spolsky","@Rachel Please do not continue to readd the software-development tag. It is a meta tag that is [slated for future clean up](http://meta.programmers.stackexchange.com/a/3092/4)."
139258,"Joel Spolsky","Do you need empirically sound data? Why do you need to collect this data yourself, rather than leveraging the body of existing research on BDD and how it compares to other development methodologies?"
139258,"Joel Spolsky","I'm not an academic, but from an engineering process perspective, a single project isn't enough to be valuable as research. When I review research into process improvement, it's often on the scale of multiple projects over a period of years. I'm not confident enough to present this as an answer, since conducting research isn't my speciality. However, it any work product produced under the conditions you describe wouldn't be valid or useful to me, as a process engineer, attempting to propose a process improvement, based on what you describe in your question. That might be something to consider."
139536,"Joel Spolsky","What tools are you currently using as part of your development process?"
139890,"Joel Spolsky","@java_mouse No, there is no need to move it. Questions about the management of software project are on-topic here under both "development methodologies"" and ""software engineering"".""
139482,"Joel Spolsky","I have closed this question based on the quality of answers, comments on the question, and moderator flags to prevent further answers pending a discussion on our [Meta site](http://meta.programmers.stackexchange.com/questions/3325/is-the-question-about-statements-being-terminated-by-semicolons-appropriate-for)."
140185,"Joel Spolsky","@RobinGreen That's true, and some studies do take a psychological or sociological approach. However, there are many variables in a project, ranging from people to tools. By the time you start reducing the variability, you end up with data that's interesting academically, but all you did was describe one set of projects with one group of people using one set of tools and processes. It becomes harder for me to determine if it's applicable to my people using my tools and processes. And to compound it, companies might be adverse to experimenting with projects that they are relying on to make money"
140173,"Joel Spolsky","@TomSquires I think it's similar and related, but not identical. That question that you linked to is explicitly about methodologies. This question is about empirical data in software engineering in general."
25636,"Joel Spolsky","Closed as part of [STCI cleanup for the software-engineering tag](http://meta.programmers.stackexchange.com/questions/3263/structured-tag-cleanup-software-engineering). Unfortunately, this question is just generating a list of artifacts rather than answering a specific question."
140337,"Joel Spolsky","@michelpm I don't own the book, so I can't comment on the validity of what they are saying, but I've never heard of push and pull used in any other way that how I've described. Perhaps if you could edit your question to contain the full paragraph or two that describe push and pull, I can further refine this answer."
140337,"Joel Spolsky","@michelpm That's right that it's not a rule. Usually, sequential models are push and the agile methods tend to be pull, but it doesn't have to be that way at all."
135615,"Joel Spolsky","Not worthy of a new answer, but extremely relevant is Scott Ambler's articles on [Agile/Lean Documentation](http://www.agilemodeling.com/essays/agileDocumentation.htm)."
140616,"Joel Spolsky","This question appears to be more polling and most, if not all, answers are equally valid. It's also incredibly broad. If you have more specific questions about things that you are learning and they are [appropriate for Programmers](http://programmers.stackexchange.com/faq), feel free to ask them. If you have any questions or want to contest the closure of this question, feel free to raise a question on our [Meta site](http://meta.programmers.stackexchange.com/)."
140761,"Joel Spolsky","Based on the current wording of this question, it's about business practices and policies, something outside the realm of professional software development."
127706,"Joel Spolsky","Based on [a discussion about a similar question](http://meta.programmers.stackexchange.com/questions/3325/is-the-question-about-statements-being-terminated-by-semicolons-appropriate-for)], this question does not fit the Q&A format well."
140939,"Joel Spolsky","This question does not relate to professional software development. Although in the course of our day, we have to interact with other people, technical and non-technical, and sometimes teach them, we aren't professional teachers or instructors and can't provide good advice on how to best teach someone. If you would like to discuss this further, you can raise a question on [our Meta site](http://meta.programmers.stackexchange.com)."
140939,"Joel Spolsky","To the best of my knowledge, there isn't a site that would accept this question. I just looked through the list and didn't see one. If you want to discuss this further, please raise a question on [Meta](http://meta.programmers.stackexchange.com)."
140453,"Joel Spolsky","@Gerenuk That all depends on your need and requirements. All of those are options. I would deal with your "extended table store"" in the ExcelTableStorage rather than a subclass"
140848,"Joel Spolsky","I'm reopening based on [a Meta discussion about questions of historical importance](http://meta.programmers.stackexchange.com/a/3348/4). Questions about the history of software development and relevant topics are on-topic here and add value. Given the wording of this question and its answers, I think this question is a good fit for this community."
141082,"Joel Spolsky","As it's written now, this question is not unique to the software development profession. Aside from a few references to "professional IT services"" and ""web development companies"""
141424,"Joel Spolsky","From a requirements engineering perspective, the "nice to have features"" still need to be captured as a requirement (in a specification"
141420,"Joel Spolsky","@Blrfl It doesn't belong on English. In the English language, the phrase "optional requirements"" is contradictory. However"
141518,"Joel Spolsky","Relevant: ['Head First' Style Data Structures & Algorithms Book? on Stack Overflow](http://stackoverflow.com/questions/455627/head-first-style-data-structures-algorithms-book)"
141518,"Joel Spolsky","Relevant: [Is there no book on algorithms that is easy to read, like the Head First series? on Stack Overflow](http://stackoverflow.com/questions/2331105/is-there-no-book-on-algorithms-that-is-easy-to-read-like-the-head-first-series)"
141445,"Joel Spolsky","I didn't even know this was an RFC. I'm not surprised that something like this exists, though, as an IEEE standard, ISO standard, RFC, or some other similar, published document."
141700,"Joel Spolsky","@sleske It does require a certain amount of discipline. But honestly, I would expect the ability to do this just fine from most developers."
142935,"Joel Spolsky","Are you undergoing any other process improvement techniques within your organization, such as applying Lean principles or Six Sigma? What industry is your organization in and do you need to comply with other standards such as ISO 9000 or AS 9100?"
142411,"Joel Spolsky","How do you want to quantify "most experience""? Most lines of code? Most recent edits? If I wrote an entire file/module a year ago and haven't touched it sense"
142978,"Joel Spolsky","Formally, it's `*..*` for many-to-many and `1..*` for one to many. The `*`s are required and it's two periods instead of three. This is called muliplicity."
142411,"Joel Spolsky","Could you edit that information into your question? When I read it, I assumed a fully automated process that was statistically valid."
143687,"Joel Spolsky","A very quick search turned up [this question about why cylinders are used to represent databases on Stack Overflow](http://stackoverflow.com/questions/2822650/why-is-a-database-always-represented-with-a-cylinder), [this question about alternatives to using a cylinder to represent databases on Stack Overflow](http://stackoverflow.com/questions/1314482/more-compelling-alternative-to-the-cylinder-icon-to-illustrate-a-database-for-en), and [this post in Google Answers about cylinders representing databases](http://answers.google.com/answers/threadview/id/365076.html)."
143917,"Joel Spolsky","@GarrettHall Unfortunately, I can't get into the specifics of the process. The process framework is designed to accomodate CMMI, AS9001, and Lean. I'll add information about the goal to the question now."
143919,"Joel Spolsky","In an agile process, TDCE/PCE make sense on an iteration level. This would also apply to teams in my environment using a spiral model of development. Since you go through all phases of the product development life cycle every iteration, you have a full set of containment metrics for use during your retrospective and/or planning meetings. To bring my analogy to agile, my problem is akin to trying to develop a defect containment metric for Scrum. Every organization tailors Scrum, so I'm not sure if anything meaningful can be brought out to talk about containment on all projects using Scrum."
143938,"Joel Spolsky","The first point is something to be considered, although this particular instance is operating in an environment that must comply with CMMI and ISO standards, so defects are well tracked. The second can be mitigated by removing all instances of names (submitter and assignee) when computing metrics so only the project information remains. Your last points are interesting, but I need to learn more about them before I can actually make an informed comment. Thanks for the input."
144305,"Joel Spolsky","@Marcin No, they don't. Computer science doesn't change if technologies changes. Mathematics doesn't change. Statistics doesn't change. Neither do requirements analysis, system design, configuration management practices, verification and validation strategies, quality principles..."
144305,"Joel Spolsky","@Marcin I've worked in everything from embedded systems to web applications. They don't change that much. The qualities of a good requirement don't change based on the domain. The tools used for designing a system don't change. How you measure and achieve high quality systems don't change."
144305,"Joel Spolsky","@Marcin I'm sorry, but quality measures don't change. All systems can be measured based on complexity, defects, uptime, performance (time, memory usage, disk space), code readability, test coverage. As a software process engineer, one of my jobs is to measure and monitor the quality of systems, and I use the same tools to measure and monitor quality."
144534,"Joel Spolsky","`But likely a waste of time for documenting your code for future programmers.` If a project wants to use UML as a form of documentation, it's typically created using reverse engineering tools. There are various tools that can generate class and sequence diagrams (and sometimes a few others) from source code, and the output of these tools is captured as documentation."
144537,"Joel Spolsky","+1 for the last paragraph. When it comes to diagramming software system, UML is great since it's standardized and should be well understood by other software developers without explanation. However, it's just a tool and you might not need that tool, depending on the people building the software."
144722,"Joel Spolsky","@www.AppTec.net Yes, it is."
144846,"Joel Spolsky","@SteveBennett Without knowing the structure of the project, I can't answer that. Some projects are more strictly structured with assigned tasks, while others are more free flowing."
145005,"Joel Spolsky","Just a note that this question is not off topic here on Programmers. The primary issues are about project structure and configuration management issues, both of which belong here (and not on Stack Overflow or any other site)."
145502,"Joel Spolsky","`Better workflows that can pretty much only work on a DVCS and otherwise be difficult on CVCSs` I highly doubt that. At work, we use ClearCase and I set up a workflow very similar to the [Separate features workflow](http://mercurial.selenic.com/guide/#separate_features) often used with Mercurial. I've also been able to employ Mercurial's [Sharing Changes](http://mercurial.selenic.com/guide/#sharing_changes) workflow. I can see how you can fairly easily implement these in Subversion, as well. So I don't consider this a valid point of comparison between distributed and centralized versioning."
145502,"Joel Spolsky","@AndrewFinnell I've seen that as well, and I wouldn't suggest that any organization use ClearCase because of the cost and technological resources needed to make it work. However, even as technologically different as ClearCase is to Git and Mercurial, I managed to set up very similar workflows for software development that address the same concerns without a significant amount of convolution (well, no more than usual when dealing with ClearCase). I suspect I could also make those workflows work just as well with Subversion (although I've never tried)."
145949,"Joel Spolsky","What do you mean by "specific UML implementation or language""? UML is a language with a [formal specification behind it](http://www.omg.org/spec/UML/). I think that there might be a good question here about the limitations of UML"
145951,"Joel Spolsky","Limitation 1: Forward engineering tools allow source to be generated from UML and reverse engineering tools allow  for keeping documents in sync with the source files, and any UML-heavy environment should probably be using tools that support this. Limitation 3: Text is more ambiguous than a well-defined standard due to ambiguities that exist in most written/spoken languages. The importance of components is generally showed by the use of multiple models that focus on particular aspects of the system."
146276,"Joel Spolsky","What are "HLD"" and ""LLD""? I don't remember ever hearing those acronyms before...""
146909,"Joel Spolsky","I'm reopening this question as there's no need to move it. The management of software projects is on-topic here, but Six Sigma is more closely related to quality and process improvement, which are also on-topic here. In addition, there is a large body of work discussing the application of Six Sigma to software projects and software process improvement (including combining Six Sigma and CMMI and Six Sigma and agile methods). Applying Six Sigma to software is different than applying it to a manufacturing environment, making this question require the expertise of a software developer."
146909,"Joel Spolsky","@Angelo Although Six Sigma was originally designed for a manufacturing environment, there has been much work in applying it to software development. Searching for phrases such as "agile six sigma"" and ""cmmi six sigma"" bring out a lot of work in the area.""
146945,"Joel Spolsky","@yossben It's not different than the Composite pattern. As far as building the tree with a particular instance of a root, that's not appropriate for a class diagram - consider an [object diagram](http://en.wikipedia.org/wiki/Object_diagram)."
147111,"Joel Spolsky","There is nothing wrong with this question. It's common knowledge that the concept of public domain doesn't exist in all areas, and this is a valid question about if this particular license is suitable and valid for software projects."
29177,"Joel Spolsky","This question appears to only be generating a list of items. Although the answers are rather impressive (and I commend the answerers who put the time and effort into their posts), they are centered on opinions and the wording of the question strikes me as polling."
148431,"Joel Spolsky","[Per a discussion on Meta.StackOverflow](http://meta.stackexchange.com/q/8259), could you add additional information from the paper that might be relevant to the asker as well as future people who find this question?"
148431,"Joel Spolsky","This post has been flagged for not containing sufficient information. I haven't read the paper yet, but it appears that people want more information added to the body of the answer. Perhaps discuss more about the specific conditions used in the study?"
148534,"Joel Spolsky","To address a few issues: Documentation questions are on-topic here on Programmers. Questions about where to obtain specific style guidelines are also on-topic, if they don't appear to be readily available (meaning by a couple of quick searches using your favorite search engine). It's also clear that [some languages provide style guidelines for in-code documentation](http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#styleguide). I don't see any problems with this question at all."
148768,"Joel Spolsky","@Caleb There is a process to apply for waivers to take the PE exam without taking the FE exam first, if you meet certain criteria. Also, the FE exam is designed for undergraduate students and most of the components of an FE exam aren't covered in undergraduate software engineering programs."
149010,"Joel Spolsky","If you want to avoid closure, you should rephase your question. Stack Exchange sites are [not search engines](http://meta.stackexchange.com/questions/128548/what-stack-overflow-is-not/128549#128549) and users are [not personal research assistants](http://meta.stackexchange.com/questions/128548/what-stack-overflow-is-not/128553#128553). Instead of asking for links to papers, the emphasis should be on asking what types of metrics have been correlated with defects and defect density."
149899,"Joel Spolsky","@GrahamLee That is true, however their work led to software engineering as not only a profession, but by the late 1990s, an academic discipline in its own right. Straw men typically get built up and (no pun intended) fleshed out, and that's exactly what happened."
136079,"Joel Spolsky","In addition, [this graph](http://www.google.com/trends/?q=git,+subversion,+svn&ctab=0&geo=all&date=all&sort=0) indicates a much smaller decline in "svn"" than is shown in ""subversion"". Also"
144147,"Joel Spolsky","I'd advise not migrating this question. This is more in the domain of software architecture and to some extend software process (both of which belong here)."
152576,"Joel Spolsky","@mehaase They are empirical. When it comes to process improvement, it's more valuable to compare your own organization before the change to your own organization after the change due to consistency across product, technology, knowledge and skills..."
153458,"Joel Spolsky","Something to note is that the first two bullet points only apply to formal inspections. A desk check at the leisure of another developer doesn't require formal preparation (if they are familiar with the system under development) nor does it require a meeting."
153459,"Joel Spolsky","@9000 It depends on your level of review. A formal inspection where each line is read is much slower than a desk check where an individual developer reads at his/her own pace. The familiarity with the programming language and system under development also have an impact. The 150-200 lines/hour is an upper bound. Personally, I find I read code at closer to 80-100 lines an hour when comprehending it and determining how it fits in with the system."
153607,"Joel Spolsky","Whilst this may theoretically answer the question, [it would be preferable](http://meta.stackexchange.com/q/8259) to include the essential parts of the answer here, and provide the link for reference."
154472,"Joel Spolsky","@EricKing What I present in the first paragraph is Option A, along with accounting for changes in business priorities that might cause the story to be descoped for a sprint or two. I do not advocate Option C because you should not "guess"" based on finished work"
155321,"Joel Spolsky","I made some edits to focus this on trying to make it explicitly clear that you are trying to find a single book rather than generate a list of resources. If any of these edits are invalid, feel free to make additional edits or roll back and make a new set of edits."
155437,"Joel Spolsky","In a software project management context, these "disasters"" are typically referred to as ""risks"". [My answer](http://programmers.stackexchange.com/a/155480/4) provides a few links that might be relevant"
156104,"Joel Spolsky","This is off-topic here on Programmers, since it's not unique to software development. You may be interested in [Personal Productivity](http://productivity.stackexchange.com/) if you focus in on the motivation and productivity aspects or [The Workplace](http://workplace.stackexchange.com/) if you focus on the work environment aspects. I'd recommend checking out Personal Productivity first, personally."
156184,"Joel Spolsky","@fish Google Chrome is not an open source project. Chromium is the open source product. Chrome has closed source components. It's also not a central product to Google as compared to things like Search."
156184,"Joel Spolsky","Chromium falls into the second category of products. The core Google products are their web services (Search, Gmail, YouTube, etc.) - these are what drives Google's business. They pay engineers to maintain Chrome (and contribute some of their content to Chromium) in order to provide a better experience to their web services. By controlling the browser, they can do more to improve their services. This is further backed up by the addition of ads promoting Google Chrome when you visit Google pages in other browsers."
156974,"Joel Spolsky","Whilst this may theoretically answer the question, [it would be preferable](http://meta.stackexchange.com/q/8259) to include the essential parts of the answer here, and provide the link for reference."
157016,"Joel Spolsky","@PhD Since that's the book, and it contains numerous examples, then just use those. Or modify them to be appropriate. It's a really good starting point."
157465,"Joel Spolsky","My understanding is that the type of linking matters. Are you statically or dynamically linking to the GPL'd project?"
157465,"Joel Spolsky","@MasonWheeler [Debatable, according to Wikipedia](http://en.wikipedia.org/wiki/GNU_General_Public_License#Point_of_view:_static_linking_violates_GPL_but_unclear_as_of_dynamic_linking). I tried to parse some of the references, but I'm no where near familiar enough with the nuances of the law to do so. Although I would suspect someone who is more familiar with GNU and using the GLP would be."
158236,"Joel Spolsky","This is one of the most wrong answers here. You always can estimate anything. There are tools and techniques to support it. The only difference is the uncertainty. You might very well have 4x or 5x variance between your estimate and the actual value (especially early in a project), but that doesn't mean that you shouldn't try to estimate to serve as a starting point for future estimates."
158252,"Joel Spolsky","@link664 Sprints are time-boxed, not feature-boxed. Therefore, there's no such thing as " remaining work to be done before that version of the product can be released"". Instead"
158357,"Joel Spolsky",""This is far more efficient than analyzing source code."" That's not a true statement. You find different types of bugs depending if you analyze source code versus a compiled product (in this case"
158357,"Joel Spolsky","You can't compare bytecode analysis tools to source code analysis tools because they do different things. Therefore, saying that one method is more efficient doesn't make sense. It might be less intensive to process, but when you consider that you find different defects, there's a different value in performing each analysis. Depending on the quality drivers in the project, it might be more valuable to run one kind of analysis over the other, or to use both in conjunction."
158366,"Joel Spolsky","@James It's typically used to compare a very large code base against a rule set. It's easier to read consistently formatted code that adheres to certain well-defined rules. The ability to check code against those rules can not only improve readability, but also prevent defects. An example is var == const versus const == var. Some people prefer all expressions to be of the form const == var because const = var is an invalid expression that can be detected - you enforce a rule to improve readability and prevent mistakes in the code that lead to defects being injected."
149027,"Joel Spolsky","@JohnR.Strohm I don't agree that it's easier to count SLOC than compute the Halstead metrics, when you are using tools to do the computation. Assuming that the Halstead metrics are valid (which is actually debated, but nothing matters for an invalid metric), knowing the amount of time required to develop the code or the projected number of defects in the system is a more useful value than knowing the amount of lines. I can build schedules with time data, quality plans with defect data, or allocate enough time to a code review with difficulty. It's harder to use raw SLOC for those things."
149027,"Joel Spolsky","@JohnR.Strohm I'm sure that a Halstead metric computation program takes a little longer to execute than a SLOC counting program. But assuming valid output becomes valid input into a decision making, I'd rather have meaningful time, effort, and defect data than a raw SLOC count. The added value of the more complex metric is often worth the additional computation time, again assuming valid inputs and valid outputs of computation."
149027,"Joel Spolsky","@JohnR.Strohm I'm familiar with the work of Boehm. The question is asking for a retrospective analysis, so it makes more sense to compute metrics based on existing code. The value of SLOC to estimate is moot. Telling a PM that a project has 10 KSLOC doesn't help them make decisions related to quality. But if I can say that this project probably has about n defects, and we've only found n/4 defects, we need to take a look at quality and adjust our strategy to find and eliminate those other defects. Complexity and difficulty also go into allocating time for reviews, which can find defects early."
158996,"Joel Spolsky","@MichaelLaffargue Assuming the rest of your process involves merging down, building, testing, and then merging up, it makes sense to add a static analysis step to that local build prior to the merge up."
159991,"Joel Spolsky","Why can't you start using a version control system now? If you are "restricted to using Notepad++"""
161893,"Joel Spolsky","@Tobias The value comes in the repeatability. You now can visualize your process and share it with others. You can also visualize it to identify areas for improvement (things that people do that aren't on the list, things that don't need to be on the list, things that people don't do that are on the list)."
162151,"Joel Spolsky","The only problem I have is your fourth passage. You don't prioritize based on story points (at least, I've never seen that, and it seems rather silly). You prioritize based on business value added and use story points to determine how many of the stories you can complete in your timeboxed iteration. It's entirely possible to take a less prioritized story into an earlier iteration because the ones above it are too large to fit within the projected velocity."
5466,"Joel Spolsky","There is [a related question](http://pm.stackexchange.com/questions/6308/how-much-technical-experience-is-required-to-be-a-software-project-manager) on the [Project Management Stack Exchange](http://pm.stackexchange.com/) as well."
162479,"Joel Spolsky","@ScottWhitlock Saving state to a file makes sense for Memento. The Memento object would have the ability to write itself to a specified format and create a new one by reading this format, while the Caretaker would provide the interface to save state to an external format or load state from the external format - it's just an extension to saving state in memory. I can't really see it's use in copy logic, though. I'd have to think about it a lot more."
162628,"Joel Spolsky","I disagree that they are "temporary"". They might not be required for the life of the project (perhaps keeping metrics through a specific window in time is sufficient)"
162625,"Joel Spolsky","@Amine That's a totally different question. Developing a good way to store and manage the data is different than developing a retention strategy. Yes, you need both, but once you have a good way of organizing and accessing your data, you can determine if and when you have too little or too much to deal with."
162627,"Joel Spolsky","@gbjbaanb Why are you storing documents in the SCM? There are often much better tools, especially when you're dealing with binary files (Word docs, PDFs, images, the output of modeling tools). Often, a file server and a wiki are far more useful for documents than SCM."
162597,"Joel Spolsky","Code Review has decided that it's not a good fit for them, so it'll be staying here. I think that this is right on the border line of design and implementation, and since design questions are on-topic here and Code Review says there's not enough for them, I don't see a good reason to close it."
162597,"Joel Spolsky","That would probably be better, considering there's no implementation of any of the methods shown. The appropriate diagrams would probably be good. But it's up to you."
162802,"Joel Spolsky","@GrahamLee How do you compare programming languages objectively other than by the subset of problems that they can solve? Anything else depends on a person's knowledge and skills in the technology and an organization's ability to support the product built using those tools. A person with years of experience writing concurrent applications in Scheme versus a person just learning Pascal, or the other way around? I'd expect the person with language experience and domain experience to be better at their particular tool. Objectively, you can't measure these things."
162802,"Joel Spolsky","@GrahamLee Confirming or rejecting your hypothesis requires objective evidence, which does not exist. There are subjective reasons to create a new paradigm and a new model of representing the exact same computational capabilities - and [this is not restricted to programming languages, but also to the underlying mathematical representation of said languages](http://en.wikipedia.org/wiki/Church-Turing_thesis). Those objective reasons include targeting a particular demographic (computational mathematician versus business analyst - their way of thinking is different requires a different paradigm)."
162802,"Joel Spolsky","From a purely objective standpoint, there's no reason why one should use functional languages over procedural languages. The only reasons that exist are subjective - fitting into the methodology and thinking of solving a particular problem or for a particular demographic."
162802,"Joel Spolsky","@Chris I don't believe that they are opaque to science. However, I believe that there are some things that by the time you, as Graham  says in the question, add "a lot of caveats and assumptions"" to the research"
163176,"Joel Spolsky","@user970696 I'm not familiar with the dependability taxonomy at all. I tend to use IEEE definitions when using things formally, just because that's what I'm familiar with."
163366,"Joel Spolsky","I'm not sure why this question was being downvoted. On the surface, it seems like a normal resource request. However, searching for things like "software engineering glossary"" or ""software engineering dictionary"" bring up references to the withdrawn IEEE Std 610-1990 or to the work of individual people that can't necessarily be considered canonical (and sometimes even disagree). Since it doesn't appear to be easy to use a search engine to find the answer"
163513,"Joel Spolsky","Can you provide a link to this webpage? I'd just like to see the context of this quote and any additional information they have."
163747,"Joel Spolsky","@KonradRudolph Could you elaborate? This post is pretty much my understanding as well, and I'm not seeing why time would matter but phase doesn't. To me, the measure of time in a project is your current phase (and sometimes your timeboxed iteration to go through all phases). I don't see the difference between work done in Day 3 of detailed design and Day 300 - the detailed design work product has not been used to make any other work products, so a defect injected in detailed design only exists in one place and only requires a change there. I don't see how the passage of days matters."
163747,"Joel Spolsky","@KonradRudolph I see where you're coming from with that. I'll see if any papers mention this when I'm researching my answer, but it appears that much of the research is done under a waterfall-like methodology. The idea of "defect found in system test"" means that ""implementation is 100% done"""
163701,"Joel Spolsky","For the record (and mentioned in my answer), the earliest mention of this I have been able to find is well before Code Complete. The work of Fagan and Stephenson (independently) in 1976 is the earliest reference to this that I can find. The first edition of Code Complete wasn't published until 1993, almost 20 years later. I would expect that the work of Barry Boehm in the 1980s led to the increase in popularity of this idea - Boehm's work was very influential to software engineering process in the 1980s and even into the late 2000s."
164359,"Joel Spolsky","Where are you reading this? Usually, verification and validation is treated as a singular activity that includes everything that goes into product quality. Both static and dynamic techniques are part of V&V."
164359,"Joel Spolsky","I'll try to answer this when I get home, but what book are you reading? Can you provide a title and author or link to it on Amazon?"
164444,"Joel Spolsky","As mentioned in the FAQ, questions about what to learn next are explicitly off-topic. Also, questions that generate lists are not considered to be good subjective questions."
164756,"Joel Spolsky","Is TDD working for you? Do you have concerns about product quality? Schedule? Communication with stakeholders? If yes, which ones are most important? If development is going well, why do you want to change?"
164061,"Joel Spolsky","@fifth Perforce should support branching. I've never used it, but every version control system that I've ever used (CVS, Subversion, ClearCase, Mercurial, Git) all support branching, so I'd be surprised if Perforce doesn't. Look at your branching strategy - stop doing work in the trunk or release branches. Developers should be working in private developer branches (1 branch per developer) or feature branches (1 branch per feature, defect, or in some cases a small collection of related defects). After their fix is implemented, the code review is a gate to merge into the release branch or trunk."
164916,"Joel Spolsky","Although your question is on-topic here on Programmers, you might also be interested in the [IT Security Stack Exchange](http://security.stackexchange.com/). If you want this question migrated, please flag it - Security says it's on-topic for them as well. However, be aware of the different answers that you'll get on each site. You might also be interested in a [Meta Stack Overflow question](http://meta.stackexchange.com/questions/64068) about cross-posting questions (read more than just the accepted answer). Perhaps consider refining your question and targeting both communities can help."
165022,"Joel Spolsky","If your last paragraph is stating that Steve Blank started the Lean Software Development movement, that is incorrect. The term "lean software development"" and the application of the lean principles to software development was started by  Mary Poppendieck and Tom Poppendieck"
165003,"Joel Spolsky","Questions like this are, as others have pointed out, best suited for lawyers. There are too many factors in play here, ranging from local laws to the conditions of the contract."
165245,"Joel Spolsky","Exactly what are you trying to achieve? Why can't you simply show what is? I would hope that your document is versioned somehow, somewhere. This would allow you to have your version 8 document and your version 9 document and view them side by side. Microsoft Word (at least more recent versions) allows you to compare documents for changes and track revision history, as well. Given this, why do you need to show changes in the document?"
165254,"Joel Spolsky","I haven't tried with diagrams yet (and it might depend on their format), but Word 2010 (and maybe earlier versions) also has a "compare documents"" diff utility built into it. You can get two versions out of your version control system and diff them side by side. Works wonderfully for text and tables"
165245,"Joel Spolsky","It sounds like diagram complexity is the problem, not an inability to compare diagrams. I'd recommend checking out the built-in Word diff tool that exists in Word 2010 (and maybe later) as referenced in ElYusubov's answer and also trying to address complexity in diagrams by showing narrower views. It might mean more diagrams, but each one would be easier to read and more relevant."
165397,"Joel Spolsky","@Shauna There's still an organization involved. In this case, it's the open source project team. They have some way of doing things, and the best thing to do would be to ask them what you should do. Given that it's an open source project, they might have forums or a mailing list to pose this question."
165397,"Joel Spolsky","@SnOrfus Often, there is no singular right way. If it's defined and works, how it should be is how it is defined. If it's defined and doesn't work or not defined, the answer is to (re)define it and my answer provides how I would define it and why I would define it that way."
164061,"Joel Spolsky","@Ian Yes. However, with continuous integration, you wouldn't build a developer's private branch. You'd set it up on an alpha or integration branch, which is one step away from the main, which only contains released code. main -> integration -> a bunch of developer or feature branches"
165675,"Joel Spolsky","I'm assuming that TCO stands for [total cost of ownership](http://en.wikipedia.org/wiki/Total_cost_of_ownership). Is this correct?"
165675,"Joel Spolsky","@AndresF. My understanding is that it's comprehensive - design, development, shipment, maintenance and upgrades. But I'm not an expert (or even have any measurable amount of experience) in the financial side of things."
165891,"Joel Spolsky","I only have a limited understanding of DFD, but I believe this is correct. You have circles, rectangles, two parallel lines, and arrowed lines as your only symbols - a relatively small vocabulary. Each of these symbols is than annotated with text to identify what component of the system is represents."
166156,"Joel Spolsky","Neither XP nor Scrum are silver bullets. In my experiences, a tailored process improvement program utilizing a number of appropriate tools works far better than expecting a single tool to drastically change your company. What is your end goal?"
166160,"Joel Spolsky","@JimmyHoffa Of the things I named, Scrum is the only management-oriented methodology. But yes, you do need to consider which tools in the toolbox would best be applied."
166160,"Joel Spolsky","@pdr I wouldn't consider that person a manager, and I wouldn't want them to manage. I'd want them to understand business, management, and software development, but only focus on continual process improvement."
166160,"Joel Spolsky","@pdr Perhaps it's my experience in the defense industry, but it's not uncommon for organizations to have a group of people dedicated to continuous improvement, and I think it would make sense in any organization that desires high quality products through the consistent use of a process methodology. These people don't work projects, but with the engineers on projects to determine pain points and make adjustments, as well as provide information and training in the process and associated tools."
166156,"Joel Spolsky","@JimmyHoffa I've never seen anyone start from scratch, unless their intent was to develop a new methodology. However, blindly applying a methodology (as appears to be the case here) is a Bad Idea."
166160,"Joel Spolsky","@ashy_32bit Don't differentiate. They often go hand-in-hand. It doesn't matter how well you manage a project, if you don't have the technical competence to carry it out, it won't succeed. On the other hand, it doesn't matter if you have the best tools money can buy and all the skills to use them, if you have poor management, the project is going to fail."
167080,"Joel Spolsky","Is this different than [this other question](http://programmers.stackexchange.com/q/135993/4)? If so, can you elaborate on why it's different."
167739,"Joel Spolsky","How often do people check code into the integration branch? Also, are developers running any kind of build/test cycle prior to merging into the branch that's under CI?"
167752,"Joel Spolsky","Define gold-plating. To me, gold plating is adding unnecessary things (in Lean terms, producing waste such as unnecessary functionality, too much documentation or non-value adding documentation). It seems like you aren't adding things that aren't needed, but are just spending time refactoring rather than pulling down new work products."
167739,"Joel Spolsky","Well, that's just a terrible idea. I'd search around for questions about branching strategies - I know others have said why working in the trunk isn't a good idea, and I'm pretty sure I've mentioned it in some of my answers."
167954,"Joel Spolsky","This question is appropriate for Programmers, assuming the intention is to learn about the appropriate algorithms and/or data structures from the perspective of software engineering concerns."
167861,"Joel Spolsky","I don't understand your comment about earned value being for "developers who haven't made the transition to Agile"". Just searching for ""earned value in agile"" and ""agile earned value"" bring up many people who have applied traditional EVM techniques to agile environments...""
167861,"Joel Spolsky","There are entire books on agile estimation, so it's pretty comprehensive. However, I've worked in agile environments that, by nature of reporting out and up, required EVMS to be applied."
167946,"Joel Spolsky","I'm not sure why this question is receiving down votes and close votes. It appears to be a valid question. I didn't see any readily available and comprehensive comparisons between these two products, and the questions asked appear to meet the guidelines for a good subjective question on Stack Exchange. If people would like to discuss the suitability of this question for this site, please bring it to our Meta site or chat room."
167739,"Joel Spolsky","@Andy It might be my opinion, but many solutions are based on your branching strategy, making it relevant. In order to implement several of the suggestions in my answer, you would need to change your branching strategy or you would encounter blocking conditions that prevent work from being done."
168349,"Joel Spolsky","It might be useful if you cite the paper that contains this information. If possible, provide a link to the paper or someplace where the paper can be obtained."
167747,"Joel Spolsky","@JimG. My point is that by learning the requirements and architecture processes, becoming better at understanding what requirements are needed by the developers, and by learning what goes into the high level architecture and design of a system, communication will be improved simply by a shared understanding of terminology and processes. The rest is on the shoulders of the developers to learn the domain and gain the domain-specific knowledge that is needed to understand the requirements and then create and implement the system design."
168414,"Joel Spolsky","@ChrisOkyen The operations `+`, `-`, `/`, `*`, and I believe `%` are not defined for type `byte` or `short`. Variables of type `byte` or `short` are casted to `int` if they are used with one of these operations. It's all explained in the links I provided to the Java Language Specification."
168669,"Joel Spolsky","I wouldn't do 4. Once it's in the issue tracker and if they have access to the tracker, I'd just provide them with a link so they can follow status. I also don't want to be too hasty with prioritizing or estimating a defect until after I've had a chance to think it through. Once more information is available, the issue tracker can be updated to provide it. If it's not a public issue tracker, I don't want to expose too much about my internal processes."
168669,"Joel Spolsky","My thoughts might be a little reactionary. I've worked in environments where the customer(s) have tried to micromanage engineering projects. I prefer to have well-defined interfaces into the development process, but try to hide the implementation details as much as possible (exposing relevant parts to the relevant stakeholders). It does depend on who you are working with and the project culture."
169854,"Joel Spolsky","Are you referring to licensing the software from Microsoft or releasing your project under a particular license? They are very different questions and the first is off-topic and you don't provide enough information for the second."
169974,"Joel Spolsky","I'm not sure why people are voting to close. The identification of appropriate licenses is on-topic here on Programmers..."
170792,"Joel Spolsky","@MartinBeckett That's a good point - I'll edit that paragraph to be more clear. I was thinking of the use case where I was either the only developer or the upstream repository was someplace like Github or Bitbucket and what was in Dropbox was my local repository."
170891,"Joel Spolsky","I disagree with this. Other variants of the singleton, such as the multiton, follow the same general design principle of a private constructor and a public getInstance() method in the same class. When you examine a class diagram or a sequence diagram for the getInstance() method, it would look generally the same. However, this design would look different from both static and dynamic views, so it seems like a different name would be helpful."
171194,"Joel Spolsky","@meWantToLearn The composition and aggregation relations are object/instance relations. I would simply call it a dependency since B does not need an instance of A to do anything."
171205,"Joel Spolsky","Answers should provide explanation and context. What are the advantages and disadvantages of each of these options? Are there some cases in which each option might not be suitable? Can you share experiences with using any of these methods? Are there any reputable sources that provide additional details about these options that could be useful?"
171283,"Joel Spolsky","@metadice Look at most open source projects. They frequently have some kind of Bugzilla, Trac, or similar tool. Hosting companies like GitHub and SourceForge include various types of forums or defect tracking tools by default. As far as managing surveys and questionnaires, I've never used this particular technique, but there are online survey management services. The actual management and control of requirements is a very different story than eliciting them and is probably well beyond the scope of this question."
171283,"Joel Spolsky","@metadice I just added links to four books, two of which I've read and can attest to and two others that I've seen highly recommended."
171496,"Joel Spolsky","@JimmyHoffa That could be part of software rot - it's not formally defined anywhere that I could see, so my examples may be incomplete. It doesn't seem like it would fit into software entropy, though, since all of the discussions about that involve actively making changes to the system."
171632,"Joel Spolsky","I don't see how this is helpful at all. The person asking this question is a student. He's explicitly asking about design principles and the interactions between two design patterns. Saying  that there isn't a need for design patterns or UML could be true in some instances in industry, but thinking about design models, design patterns, and UML could be the point of the exercise being asked about."
171744,"Joel Spolsky","I'm not sure why the flags and close votes. There's a difference between asking what to learn or if learning something is a good idea (both of which make for poor questions) and asking about an order in which to learn a fixed set of related technologies to build upon existing knowledge efficiently."
175106,"Joel Spolsky","Your question title and first sentence and your actual question don't match up. Neither of those quotations say that the V Model introduced QA to software development. What they both say is that the V Model is more quality-centric than the waterfall model, which is a true statement since quality activities form the entire right side of the V (instead of being a single activity after development) and the quality activities are explicitly linked to development activities. QA existed before the V Model, it simply wasn't well represented in the waterfall model."
175671,"Joel Spolsky","@user970696 I'm not familiar with ISO 12207. My experiences are in CMMI. However, I question that definition from a practical standpoint. User acceptance testing is a validation activity, however unit testing and integration testing are generally considered verification and validation activities."
175671,"Joel Spolsky","@user970696 Like I said, I'm not familiar with the ISO standard and to the best of my knowledge it's not freely available for me to read. I'm providing my knowledge, based on IEEE publications, the CMMI, and commonly used and accepted resources to answer your questions. I answered your question about the term "static testing"" - many reputable and frequently cited sources and standards don't use it. If the ISO does and you are basing your work on their standards"
175671,"Joel Spolsky","@user970696 I misread a sentence in your question. I'm not sure I'd trust the ISTQB resources, then. Their definitions are incredibly out of line with not only other formal definitions, but how the terms are used."
175895,"Joel Spolsky","The only thing that I have to add to this answer, just for explicit clarity, is that the second system refers to a second production system."
176089,"Joel Spolsky","Why doesn't the team (I'm assuming you mean the development staff, since the product owner is part of the team) have any knowledge of the requirements or the problem domain? If they don't, how are they going to be responsible for estimating the stories and deciding how much to bring into each iteration?"
176973,"Joel Spolsky","What problem are you trying to solve? Are you currently using the first method you described? If you are, are you running into problems with it? What kinds of problems? If you aren't experiencing problems with your current workflow, why are you trying to change it? It doesn't make sense to introduce a change in a working process unless you want to improve some aspect of it - what aspect are you trying to ultimately improve?"
177196,"Joel Spolsky","We can't speculate as to why Google does or does not do something."
177167,"Joel Spolsky","I'm reopening this question. It doesn't make sense on Workplace to me, which is for general and cross-disciplinary concerns. The specific measurement of performance of software developers is different than measuring performance of some other professions, so I don't see how it's appropriate for migration. However, @ATeamLead, you should update this question with some more of the information that was asked about in the comments, such as your geographic location."
177333,"Joel Spolsky","@Martin I can't right now, but I can try to revisit this question later. It won't be comprehensive, since only a handful of models are discussed in Rapid Development and there's no way to discuss every model in an answer. I'm just not sure how useful it would be, though, due to the sheer number of variables. I have a feeling that there are books (such as Rapid Development, and others that it cites) that can do a far better job explaining it than I can in an answer here. Is there anything in particular that you want explained?"
177329,"Joel Spolsky","@user1796528 I can't answer that question. I'd recommend trying Eclipse's Papyrus plugin, though. It supports most of (maybe all) of UML 2.0 and most of SysML as well."
177895,"Joel Spolsky","It still appears that in 2010/2011, there was a dramatic rise in popularity. It went from about 13k installs of git-core (which is Git) in 2010-01 to well over 50k installs (cumulative of git-core and git packages) in 2011-01. That's an increase of almost 40k installs in one year - a much sharper increase than any other annual increase."
177875,"Joel Spolsky","Are you curious about the overall popularity of Git or the installation of Git on Debian? Your data only provides information about one Linux distribution, ignoring every other Linux distribution, along with BSD, Mac, and Windows operating systems, yet you're asking a generic question about the rise in use of a tool. Based on some of the answers, there is a Debian-specific explanation, but there's insufficient data to speak to the popularity of Git versus the popularity of Mercurial across all potential users. It seems like the question as presented is based on faulty assumptions."
177579,"Joel Spolsky","There are many metrics associated with testability and defect rates - coupling, cohesion, fan-in, fan-out, lines of code, cyclomatic complexity, the CK metrics, the Halstead metrics. Searching for many of these and "defects"" shows numerous studies in which the correlation between the metric and defects is discussed (some more than others).""
178143,"Joel Spolsky","There are a lot of tools for reverse engineering, static analysis, and the gathering of various metrics from an existing code base. Most IDEs have some of these (like call hierarchy and class identification) built in - Eclipse is an example of an open source IDE. Other functionality is provided by plugins, some of which may be open source. However, without knowing what information you're trying to gather, this isn't really an answerable question."
178145,"Joel Spolsky","@engineer I don't think there's much practical knowledge or experience in this area out there yet. Every time I've read anything about this, it has been in academic publications. One project did release an Eclipse plugin, but I would still consider that an academic tool to support their research."
178152,"Joel Spolsky","@AlexMA That phrase never appears in my answer, so I don't know what you want expanded upon. If you work to create a project while on the clock or are using your employer's resources, see paragraph 2. If it's related to an ongoing project at work or your company's business, see paragraphs 3 and 4. In any case, it's a bad idea (if not unethical or illegal) to work on work-related things without permission, on your own time or not."
178152,"Joel Spolsky","@AlexMA If you're going to create something for use at work, even on your own time, you need to go through your employer's legal department. It's touched upon in my last paragraph and in Dunk's comment - doing work outside for the purposes of supporting a project can have detrimental impacts, and possibly legal consequences. An unrelated idea is one thing, but if you want to use what you make at work, go through legal before you begin working on it."
178259,"Joel Spolsky","Suggesting projects to work on or join is explicitly mentioned in our [FAQ] as being off-topic."
178259,"Joel Spolsky","You might want to edit your post to be more clear about what you're looking for. Your title, 1st, and 5th paragraph (which is the only one that contains an actual question) seem to indicate that you're looking for projects to work on."
178259,"Joel Spolsky","You need to edit your post to include this information if you want it reopened, however that still sounds like it is not constructive. We expect questions to be about finding a solution to a problem, not to turn into a list of projects, links, or tips. Since you're looking for projects of a particular type, what are you trying to learn from them? Asking that might be better suited to this format. If you need more help, feel free to ask [on Meta](http://meta.programmers.stackexchange.com/) or [in chat](http://chat.stackexchange.com/rooms/21/the-whiteboard)."
178259,"Joel Spolsky","You need to edit your post to clearly state what you want to learn, not post it as comments. Make your title and body extremely clear and specific, and then flag this post for review. Leaving comments is insufficient to have a question reopened."
178413,"Joel Spolsky","A similar title that can also be described by this answer is something like "tools engineer"" (and"
178465,"Joel Spolsky","@AndreasScheinert The [how to answer guide](http://programmers.stackexchange.com/questions/how-to-answer) makes it clear that links must always be accompanied by summaries and/or relevant quotations."
178521,"Joel Spolsky","Are your QA activities happening concurrently with and continuously throughout your sprint or do you have QA activities scheduled toward the end? Are these bug reports coming from a previous release or are they found in the middle of your sprint?"
178640,"Joel Spolsky","@user970696 I've never worked any place that uses the term "functional spec"""
177333,"Joel Spolsky","@Martin I started to work on updating this, but it was just turning into something way too complicated for an answer on Stack Exchange. Steve McConnell breaks it down as simple as I think it gets (or at least as I can explain it) in an entire chapter of Rapid Development. It's just a matter of understanding how each process deals with the project characteristics I mentioned and choosing the best one for the project and the team."
178919,"Joel Spolsky","List questions don't make particularly good questions for a Stack Exchange site. Also, the questions that would be most helpful to ask are dependent on your end goals."
180590,"Joel Spolsky","What do you mean by "standalone development approach""?""
181125,"Joel Spolsky","Although algorithms are defined as on-topic here, the design of languages and parsers tends to fall into the realm of computer science. You might get better answers on the [Computer Science Stack Exchange](http://cs.stackexchange.com/). If you want this question moved, flag it for moderator review. Please do not cross-post it."
181402,"Joel Spolsky","I don't believe that version control is difficult for non-developers. I've had graphic designers, business analysts, non-computing engineers, technical writers, and managers use version control before. Have you tried to teach your non-developer how to use version control?"
181482,"Joel Spolsky","Exactly what do you mean by "git-friendly""? I haven't used git a whole lot"
160587,"Joel Spolsky","@ysdx This question is off-topic for us here on Programmers. It has been [reposted on Stack Overflow](http://stackoverflow.com/questions/14163072/how-to-force-evaluation-in-haskell) where it's on-topic. If you want to repost an answer there, feel free to do so and then flag the repost of your answer for deletion to set things right. Ping me in chat for any questions."
181646,"Joel Spolsky","I'm not sure why there are close votes against this question. But, I have two problems with statements in it. First, one does not "follow the SWEBOK"". The SWEBOK is a method of organizing the knowledge that exists within the field of software engineering in a logical manner"
181646,"Joel Spolsky","Within CMMI, every organization can realize each practice in their own way. There's really no "standard"" other than that you are doing the defined activities that are deemed important to successful engineering projects in some way and providing objective evidence of doing them. There's absolutely no measure of how well they are performed or how rigorous the company is in terms of following them"
181646,"Joel Spolsky","In summary, your entire middle paragraph is based on a false assumption. You also need to consider industry-specific standards and regulations that define how projects are implemented. For example, AS9100 quality guidelines in the aerospace industry or various defense and military regulations in the defense sector (which could be stacked in defense contractors in the aerospace industry)."
181646,"Joel Spolsky","As a software engineer who works extensively in CMMI, that's not true for [the staged deployment of the CMMI framework](http://www.sei.cmu.edu/library/assets/cepeda-cmmi.pdf). However, the certification process is also different. You do get audited and assessed, but the organization is able to choose different sections and achieve a maturity level in each particular area instead of across the board."
181646,"Joel Spolsky","The SWEBOK is a method of organizing knowledge and making it accessible. From the [About SWEBOK page](http://www.computer.org/portal/web/swebok/about): `The Guide to the Software Engineering Body of Knowledge (SWEBOK) describes generally accepted knowledge about software engineering. Its 10 knowledge areas summarize basic concepts and include a reference list pointing to the detailed information.` It's a directory of topics. The only time that I've seen the phrase "follow the SWEBOK"" is with regards to academic programs and curricula development to ensure coverage of the breadth of the field..""
181782,"Joel Spolsky","@DocBrown True. That's where things like peer reviews come in, though. Especially true with a new team member or someone working in an unfamiliar module - someone with more experience with the system and a better understanding of how it is designed and implemented can provide feedback and comments as well as answer questions during the investigate/fix/test cycle."
181792,"Joel Spolsky","I fail to see how this doesn't belong here, under "business and freelance concerns"". I made some edits to focus more on how to determine what to do"
181802,"Joel Spolsky","For anyone voting to close - why? This is very much on-topic. Not only is it a freelancing and business concern, it's also related to software distribution, which affects any developer trying to distribute their software."
181802,"Joel Spolsky","@Ryathal I can understand Apple (or any other app market) providing technical support, I don't think they would explain various options and trade-offs that exist with each one."
182038,"Joel Spolsky","@Nick Every team using Scrum would break their requirements down into an appropriate granularity and use sprint backlogs of stories. Teams not using Scrum might handle their task assignments according to some other process. You might have a team for each component, but things like "project management"" and ""communications"" aren't components - they are activities. You would have a team that writes and tests software. Another team that assembles the physical hardware. Another to maintain infrastructure. Each would have its own process.""
183648,"Joel Spolsky","@HLGEM I'd even argue that the less experienced person should be the driver most of the time, while the more experienced person is reviewing the code for defects and style or writing test cases against it."
183942,"Joel Spolsky","I would agree with @Baqueta that Git is probably the wrong tool for this. I would solve this problem using some kind of plugin-based architecture and a deployment tool to choose the appropriate plugins. The whole idea of clients dealing with repositories is rather scary - they should deal with binaries, resources (images, style sheets, etc.) and configuration options."
184707,"Joel Spolsky","I'm quite familiar with various metrics, but I have never seen anything like this before. Can you cite a source?"
184707,"Joel Spolsky","I have to down vote this because it's useless. An equation with absolutely no empirical or even anecdotal backing is not a metric and doesn't answer the question."
185451,"Joel Spolsky","@gnat This question is fine, even in its original form."
185451,"Joel Spolsky","@gnat Only two? That's fine. Let them be posted and voted on. Two potentially correct answers with justification and reasoning that are opposite doesn't make the question bad. Neither does 3 or 4 or even 5. It's a well formed question that's a problem library developers must deal with, and the burden is then put on the answers to [be good answers](http://programmers.stackexchange.com/questions/how-to-answer)."
185489,"Joel Spolsky","Please do not cross-post questions between Stack Exchange sites. I see that you posted this on Programmers first - this is the right site for questions about software architecture and design and development methodologies."
185489,"Joel Spolsky","This [discussion on Meta Stack Overflow](http://meta.stackexchange.com/questions/95615/cross-posting-etiquette) explains why cross posting is not a good thing. Your Stack Overflow question has been migrated here and merged with this one since this site is where this type of question belongs."
185671,"Joel Spolsky","For reference, [this question and its answers](http://programmers.stackexchange.com/q/118703/4) discusses the history of single returns in functions."
185671,"Joel Spolsky","I'm not sure if that explicitly answers your question in any of the answers. I just remember reading that question in the past and figured I'd link it."
186761,"Joel Spolsky","What, exactly, do you mean by "junior programmers""? Are these people with less experience in the application or simply less experience in industry? In my experience"
186777,"Joel Spolsky","@pdr I consider violations of coding standards to be defects (it's even defined that way in PSP and TSP). So considering that your #2 and #3 are rolled up together into my concept of a defect, I think that bumps it ahead of knowledge sharing. That's not to say that knowledge isn't shared - at the level of detail of a code review, it's hard to get an understanding of the system as a whole (which I think is necessary to understand the implementation details). From the perspective of the junior engineer, until they are familiar with the system, a code review is a poor method of knowledge sharing."
186777,"Joel Spolsky","@pdr A coding standard should be established well before the first line of code is written. If you're using reviews to establish the standard, it's too late. It may be a good time to tailor the coding standard as you're developing - you can use reviews to point out weaknesses or suggest improvements to the standard, but I can't imagine starting a development project without some standard (even if it's just the language's suggested guidelines)."
186777,"Joel Spolsky","@pdr There should be organizational recommendations across project. In critical systems, using a decision analysis and resolution process to evaluate options and choose the best one is key. Nothing is determined in a code review, but at the appropriate time in planning, after requirements are specified, or based on system architecture. A code review only looks at written code to ensure it conforms to the mandated style, the system design, and is defect free. If you're making decisions about what unit test framework or what library to use after code is written, you're doing things out of order."
186777,"Joel Spolsky","@Jefromi And I answered that. A junior engineer may have the knowledge necessary to aid in the completion of the purpose of the code review - finding errors in the implementation of a design. Even if they do not have that knowledge, there may still be some value in including them, assuming you consider the risks associated with inviting them."
188251,"Joel Spolsky","Along the lines of this answer, if FTP or TFTP won't work, there are other protocols built on top of either TCP or UDP that are similar in nature. There are many [application layer protocol examples](http://en.wikipedia.org/wiki/Application_layer) on Wikipedia."
167959,"Joel Spolsky","I edited your more recent answer into this one. Stack Exchange is not a forum - there are few, if any, instances where one should have multiple answers to the same question. In the future, if your answer changes, please edit the original post rather than creating a new one."
188455,"Joel Spolsky","Please continue the discussion about this question [in this Meta question](http://meta.programmers.stackexchange.com/questions/5628/content-dispute-for-why-do-programming-languages-especially-c-use-curly-brace)."
188455,"Joel Spolsky","I have unlocked this post. Please keep any comments about the question and discussion about appropriateness on [the Meta question](http://meta.programmers.stackexchange.com/questions/5628/content-dispute-for-why-do-programming-languages-especially-c-use-curly-brace)."
189788,"Joel Spolsky","For the people who voted to migrate this to Stack Overflow, our FAQ defines "algorithm and data structure concepts"" belong here. This question is not about an implementation in a particular language"
190048,"Joel Spolsky","Perhaps relevant is [this question about how to convince management to deal with technical debt](http://programmers.stackexchange.com/questions/43948/how-can-i-convince-management-to-deal-with-technical-debt). I'm not sure that it's an exact duplicate, but it may have some helpful material."
190048,"Joel Spolsky","@MarkRovetta Software entropy is similar to [software rot](http://en.wikipedia.org/wiki/Software_rot) and is related to the idea of entropy from thermodynamics. As software systems grow in terms of scope and functionality, they become more complex and more difficult to maintain. Investing effort can reduce the increase in entropy."
190048,"Joel Spolsky","I found two other questions that may also be relevant: One is about [maintaining sanity when refactoring poor code](http://programmers.stackexchange.com/questions/66438/techniques-to-re-factor-garbage-and-maintain-sanity) and the other is about [what do to after inheriting bad code](http://programmers.stackexchange.com/questions/155488/ive-inherited-200k-lines-of-spaghetti-code-what-now). If none of these three questions address your concerns, consider revising your question to be more specific about your situation."
190399,"Joel Spolsky","I removed a bullet point about pointers to resources - Stack Exchange is not a good format for people to simply provide resources, but their experiences and knowledge in combination with any resources that may be able to help you solve your particular problem."
193492,"Joel Spolsky","@user1394925 I looked in two books and Wikipedia and they all use "cutover"" (not ""implementation"") and ""construction"". But your source seems reasonable as well - I'm not sure if there's a particular standard. As long as you're careful and define the terms"
194061,"Joel Spolsky","You found data from the Software Engineering Institute, an organization that is recognized as a leader in software engineering. I don't understand what your question is - you found a range list for cyclomatic complexity. What else are you looking for?"
196844,"Joel Spolsky","How is that different than other engineering disciplines? Let's take civil engineering. Anyone can build a bridge in their back lawn over a creek. But not everyone can build a highway bridge over a lake. I think that can be applied to many other engineering disciplines as well, and it's commonly accepted that engineering is a profession."
196844,"Joel Spolsky","That's not true. Not everyone can build the avionics software for a commercial jetliner. Or the control software for a radiation therapy machine. There is plenty of software that is controlled, regulated, and there needs to be certain standards. However, until more recently, there weren't the same licenses that go along with other engineering disciplines."
196844,"Joel Spolsky","There was an article by John R. Speed in the November/December 1999 issue of IEEE Software. It referenced that working with embedded and real-time systems that require understanding "engineered electrical or mechanical components"" or any kind of software that interacts with ""mechanical devices"
